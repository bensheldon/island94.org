<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Oct 2025 14:59:00 +0000</pubDate>
    <generator>Ruby on Rails</generator>
      <item>
        <title>Serializing ViewComponent for Active Job and Turbo Broadcast Later</title>
        <description>
          <![CDATA[
          <p>I recently started using ViewComponent. I‚Äôve been gradually removing non-omikase libraries from my Rails applications over the past decade, but ViewComponent is alright. I was strongly motivated by Boring Rails‚Äô <a href="https://boringrails.com/articles/self-updating-components/">‚ÄúHotwire components that refresh themselves‚Äù</a>, cause matching up all the dom ids and stream targets between views/partials and‚Ä¶ wherever you put your Stream and Broadcast renderers is a pain.</p>

<p>You might also know me as the GoodJob author. So of course I wanted to have my Hotwire components refresh themselves <em>later</em> and move stream broadcast rendering into a background job. I to simply call <code>MessagesComponent.add_message(message)</code> and broadcasts an update <em>later</em> to the correct stream and target that are all nice and compactly stored inside of the View Component:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessagesComponent</span> <span class="o">&lt;</span> <span class="no">ApplicationComponent</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">user</span>
    <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_action_later_to</span><span class="p">(</span>
      <span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">,</span>
      <span class="ss">action: :append</span><span class="p">,</span>
      <span class="ss">target: </span><span class="no">ActionView</span><span class="o">::</span><span class="no">RecordIdentifier</span><span class="p">.</span><span class="nf">dom_id</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:messages</span><span class="p">),</span>
      <span class="ss">renderable: </span><span class="no">MessageComponent</span><span class="p">.</span><span class="nf">serializable</span><span class="p">(</span><span class="ss">message: </span><span class="n">message</span><span class="p">),</span> <span class="c1"># &lt;- that right there</span>
      <span class="ss">layout: </span><span class="kp">false</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">:,</span> <span class="n">messages</span><span class="p">:)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="n">messages</span>
  <span class="k">end</span>

  <span class="n">erb_template</span> <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
    &lt;%= helpers.turbo_stream_from @user, :message_list %&gt;
    &lt;div id="&lt;%= dom_id(@user, :messages) %&gt;"&gt;
      &lt;%= render MessageComponent.with_collection @messages %&gt;
    &lt;/div&gt;
</span><span class="no">  HTML</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That‚Äôs a simple example</p>
<h3 id="making-a-renderable-work-later">Making a renderable work <em>later</em></h3>

<p>The ViewComponent team can be really proud of <a href="https://github.com/rails/rails/pull/37919">achieving first-class support Rails</a> for a library like ViewComponent. Rails already supported views and partials and now it also supports an object that quacks like a <code>renderable</code>.</p>

<p>For ViewComponent to be compatible with Turbo Broadcasting <em>later</em>, those View Components need to be serializable by Active Job. That‚Äôs because Turbo Rail‚Äôs <code>broadcast_*_later_to</code> takes the arguments it was passed and serializes them into a job so they can be run elsewhere better/faster/stronger.</p>

<p>To serialize a ViewComponent, we need to collect its initialization arguments, so that we can reconstitute it in that <em>elsewhere</em> place where the job is executed and the ViewComponent is re-initialized. To initialize a ViewComponent, you call <code>new</code> which calls its  <code>initialize</code> method. To patch into that, there‚Äôs a couple of different strategies I thought of taking:</p>

<ul>
  <li>Make the developer figure out which properties of an existing ViewComponent (ivars, attributes) should be grabbed and how to do that.</li>
  <li><code>prepend</code> a module method in front of <code>ViewComponent#initialize</code>. Our module would always have to be at the top of the ancestors hierarchy, because subclasses might overload <code>initialize</code> themselves, so we‚Äôd have to have an <code>inherited</code> callback that would prepend the module (again) every time that happened</li>
  <li>Simply initialize the ViewComponent via another, more easily interceptable method, when you want it to be serializable.</li>
</ul>

<p>I respect that ViewComponent really wanted a ViewComponent to be <em>just like any other Ruby object</em> that you create with <code>new</code> and <code>initialize</code> , but it makes this particular goal, serialization, rather difficult. You can maybe see the ViewComponent maintainers ran into a few problems with initialization themselves: a collection of ViewComponents can optionally have each member initialized with an iteration number, but to do that <a href="https://github.com/ViewComponent/view_component/blob/1ed16e33ad70e45ffc08de3b68760a83d08e912e/lib/view_component/base.rb#L667-L712">ViewComponent has to introspect the <code>initialize</code> parameters</a> to determine if the object implements the iteration parameter to decide whether to send it ü´† That parameter introspection also means that we can‚Äôt simply prepend a redefined generic <code>initialize(*args, **kwargs)</code> because that would break the collection feature. Not great üíõ</p>

<p>So, given the compromises i‚Äôm willing to make between ergonomics and complexity and performance, given my abilities, and my experience, and what I know at this time‚Ä¶. I decided to simply make a new initializing class method, named <code>serializable</code>. If I want my ViewComponent to be serializable, I initialize it with <code>MyComponent.serializable(foo, bar:)</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="c1"># config/initializers/view_component.rb</span>
<span class="c1">#</span>
<span class="c1"># Instantiate a ViewComponents that is (optionally) serializable by Active Job</span>
<span class="c1"># but otherwise behaves like a normal ViewComponent. This allows it to be passed</span>
<span class="c1"># as a renderable into `broadcast_action_later_to`.</span>
<span class="c1">#</span>
<span class="c1"># To use, include the `ViewComponent::Serializable` concern:</span>
<span class="c1">#</span>
<span class="c1">#  class ApplicationComponent &lt; ViewComponent::Base</span>
<span class="c1">#    include ViewComponent::Serializable</span>
<span class="c1">#  end</span>
<span class="c1">#</span>
<span class="c1"># And then call `serializable` instead of `new` when instantiating:</span>
<span class="c1">#</span>
<span class="c1">#   Turbo::StreamsChannel.broadcast_action_later_to(</span>
<span class="c1">#     :admin, client, :messages,</span>
<span class="c1">#     action: :update,</span>
<span class="c1">#     target: ActionView::RecordIdentifier.dom_id(client, :messages),</span>
<span class="c1">#     renderable: MessageComponent.serializable(message: message)</span>
<span class="c1">#   )</span>
<span class="c1">#</span>
<span class="k">module</span> <span class="nn">ViewComponent</span>
  <span class="k">module</span> <span class="nn">Serializable</span>
    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

    <span class="n">included</span> <span class="k">do</span>
      <span class="nb">attr_reader</span> <span class="ss">:serializable_args</span>
    <span class="k">end</span>

    <span class="n">class_methods</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nf">serializable</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">).</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">instance</span><span class="o">|</span>
          <span class="n">instance</span><span class="p">.</span><span class="nf">instance_variable_set</span><span class="p">(</span><span class="ss">:@serializable_args</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">ruby2_keywords</span><span class="p">(</span><span class="ss">:serializable</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ViewComponentSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">ObjectSerializer</span>
  <span class="k">def</span> <span class="nf">serialize?</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
    <span class="n">argument</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">ViewComponent</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">argument</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:serializable_args</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span>
      <span class="s2">"component"</span> <span class="o">=&gt;</span> <span class="n">view_component</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span>
      <span class="s2">"arguments"</span> <span class="o">=&gt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">.</span><span class="nf">serializable_args</span><span class="p">),</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="nb">hash</span><span class="p">[</span><span class="s2">"component"</span><span class="p">].</span><span class="nf">safe_constantize</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">[</span><span class="s2">"arguments"</span><span class="p">]))</span>
  <span class="k">end</span>

  <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="p">.</span><span class="nf">add_serializers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Real talk:</strong> I haven‚Äôt packaged this into a gem. I didn‚Äôt want to maintain it for everyone, and there‚Äôs some View Component features (like collections) it doesn‚Äôt handle yet because I haven‚Äôt used them (yet). I think this sort of thing is first class behavior for the current state of Rails and Active Job and Turbo, and I‚Äôd rather the library maintainers figure out what the best balance of ergonomics, complexity, and performance is for them. I‚Äôve been gently poking them about it in their Slack; they‚Äôre great and I believe we can arrive at something even better than this patch I‚Äôm running with myself for now üíñ</p>


          ]]>
        </description>
        <link>https://island94.org/2025/10/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</link>
        <guid isPermaLink="true">https://island94.org/2025/10/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</guid>
        <pubDate>Mon, 06 Oct 2025 14:59:00 +0000</pubDate>
      </item>
      <item>
        <title>Notes from building a ‚Äúwho is doing what right now on our website?‚Äù presence feature with Action Cable</title>
        <description>
          <![CDATA[
          <p><img src="/uploads/2025/presence-screenshot.jpg" alt="A screenshot of my application with little presence indicators decorating content" /></p>

<p>I recently was heads down building a ‚Äúpresence‚Äù feature for the case and communications management part of my startup‚Äôs admin dashboard. The idea being that our internal staff can see what their colleagues are working on, better collaboarate together as a team of overlapping responsibility, and reduce duplicative work.</p>

<p>The follow is more my notes than a cohesive narrative. But maybe you‚Äôll get something out of it.</p>

<h3 id="big-props">Big props</h3>

<p>In building this feature, I got a lot of value from:</p>
<ul>
  <li><a href="https://github.com/basecamp/once-campfire">Basecamp‚Äôs Campfire</a> app, recently open sourced, which has a sorta similar feature.</li>
  <li>Rob Race‚Äôs <a href="https://robrace.dev/blog/turbo-morphs-presence-channels-and-typing-indicators/#presence-channel">Developer Notes about building a Presence Feature</a></li>
  <li>AI slop, largely Jetbrains Junie agent. Not because it contributed code to the final feature, but because I had the agent try to implement from scratch 3 different times, and while none of them fully worked (let alone met my quality standards or covered all edges), it helped sharpen the outlines and common shapes and surfaced some API methods to click into that I wasn‚Äôt aware of. And made the difference between undirected poking around vs being like ‚Äúok, this is gonna require no more than 5 objects in various places working together; let‚Äôs go!‚Äù</li>
</ul>

<h3 id="the-big-idea">The big idea</h3>

<p>The feature I wanted to build would track multiple presence keys at the same time. So if someone is on a deep page (<code>/admin/clients/1/messages</code>) they‚Äôd be present for that specific client, any client, as well as the dashboard a whole.</p>

<p>I also wanted to keep separate ‚Äútrack my presence‚Äù and ‚Äúdisplay everyone‚Äôs presence‚Äù.</p>

<p>What I ended up with was:</p>

<ol>
  <li>Client in the browser subscribes to the <code>PresenceChannel</code> with a <code>key</code> param. It also sets up a setInterval heartbeat to send down a <code>touch</code> message every 30 seconds. This is a Stimulus controller that uses the Turbo cable connection, cause it‚Äôs there.</li>
  <li>On the server, the PresenceChannel has <code>connected</code>, <code>disconnected</code>, and <code>touch</code> actions and stores the <code>key</code> passed during connect. It writes to an Active Record model UserPresence and calls <code>increment</code>, <code>decrement</code>, and <code>touch</code> respectively.</li>
  <li>The Active Record model persists all these things atomically (Postgres!) and then triggers vanilla Turbo Stream Broadcast Laters (GoodJob!).</li>
  <li>The frontend visually is all done with vanilla Turbo Stream Broadcasts over the vanilla Turbo::StreamsChannel appending to and removing unique dom elements that are avatars of the present users.</li>
</ol>

<p>It works! I‚Äôm happy with it.</p>

<p>Ok, let‚Äôs get some grumbles out.</p>

<h3 id="action-cable-could-have-a-bit-more-conceptual-integrity">Action Cable could have a bit more conceptual integrity</h3>

<p>I once built some Action Cable powered features <a href="https://github.com/bensheldon/open311status/pull/59">about 7 years ago</a>, before Turbo Broadcast Streams, and it wasn‚Äôt my favorite. Since then, Turbo Broadcast Streams totally redeemed my feelings about Action Cable‚Ä¶ and then I had to go real deep again on Action Cable to build this Presence feature.</p>

<p>At first I thought it was me, ‚Äúwhy am I not just getting this?‚Äù, but as I became more familiar I came to the conclusion: nah, there‚Äôs just a lot of conceptual‚Ä¶ noise‚Ä¶ in the interface. I get it, it‚Äôs complicated.</p>

<p>In the browser/client: You have a Connection, a Connection ‚Äúopens‚Äù and ‚Äúcloses‚Äù, but also ‚Äúreconnects‚Äù (reopens?). Then you create a Subscription on the Connection by Subscribing to a named Channel (which is a backend/server concept); Subscriptions have a ‚Äúconnected‚Äù callback when <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscription.js#L9">‚Äúsubscription has been successfully completed‚Äù</a> (subscribed?) and ‚Äúdisconnected‚Äù <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscription.js#L13">‚Äúwhen the client has disconnected with the server‚Äù</a> (a Connection disconnect). If the Connection closes, reconnects, and reopens, then the Channel‚Äôs disconnected and reconnected callbacks are triggered again. Subscriptions can also be <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscriptions.js#L50">‚Äúrejected‚Äù</a>. You can see some of this drift too in the <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/internal.js#L2-L8">message types key/value constants</a> .</p>

<p>‚Ä¶as a concrete example: you don‚Äôt <code>connection.subscribe(channelName, ...)</code> you <code>consumer.subscriptions.create(channelName, ...)</code> (oh jeez, it‚Äôs called Consumer). Turbo Rails tries to clean up some of this as you can call <code>cable.subscribeTo(channelName, ...)</code>to subscribe to a Channel using Turbo Stream Broadcasts‚Äô existing connection. But even that is compromised because you don‚Äôt <code>subscribeTo</code> a channel, you <code>subscribeTo</code> by passing an object of <code>{ channel: channelName, params: paramsforChannelSubscribe }</code> .  Here‚Äôs an <a href="https://github.com/basecamp/once-campfire/blob/3d0a10dbdd6d24941f22595072c2021f0c2dca10/app/javascript/controllers/presence_controller.js#L13">example from Campfire.</a></p>

<p>On the server, I have accepted that the Connection/Channel/Streams challenges me, which is probably because of the inherent complexity of multiplexing Streams (no, not Turbo ‚ÄúStreams‚Äù, Action Cable ‚ÄúStreams‚Äù) over Channels that are themselves multiplexed over connection(s), and it makes my head spin. . That Channels connect Streams, and one Broadcasts on Streams, and one can also <code>transmit</code> on a channel to a specific client in a Channel, and often one does <code>broadcast(channel, payload)</code> but <code>channel</code> may be the name of a Stream. My intuition is that Streams were bolted onto Action Cable‚Äôs Chanel implementation rather part of the initial conception though it all <a href="https://github.com/rails/rails/pull/22586">landed in Rails at once</a>.</p>

<p>I‚Äôm a pedantic person, and it‚Äôs tiring for me to write about this stuff with precision. Active Storage named variants‚Äîwith its record-blob-variant-blob-record‚Äîhas as an analogous vibe of ‚ÄúI guess it works and I have a hard time looking directly at it‚Äù.</p>

<p>I have immense compassion and sympathy and empathy for trying to wrangle something as complex as Action Cable. And also fyi, it <em>is</em> a lot.</p>

<h3 id="testing">Testing</h3>

<ul>
  <li>You‚Äôll need to isolate and reset Action Cable after individual tests to prevent queries from being made after the transaction rollback, or changing of pinned database connection:<code>ActionCable.server.restart</code></li>
  <li>If you see deadlocks, <code>pg.exec</code> freezes or AR gives you <code>undefined method 'count' for nil</code> inside of Active Record <a href="https://github.com/rails/rails/blob/b0c813bc7b61c71dd21ee3a6c6210f6d14030f71/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L167">because the query result object is <code>nil</code></a>, that‚Äôs a sign that the database connection is being read out-of-order/unsafely asynchronously/all whack.</li>
</ul>

<h3 id="page-lifecycle">Page lifecycle</h3>

<p>Live and die by the <a href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api">Browser Page Lifecycle API</a>.</p>

<p>Even with <code>data-turbo-permanent</code>, Stimulus controllers and <code>turbo-cable-streams</code> JavaScript get disconnected and reconnected. Notice that there is a lot of use of nextTick/nextFrame to try to smooth over it.</p>

<ul>
  <li><code>hotwired/turbo</code>: [<turbo-stream-source>¬†does not work as permanent](https://github.com/hotwired/turbo/issues/868#issuecomment-1419631586)</turbo-stream-source></li>
  <li>Miles Woodroffe: <a href="https://mileswoodroffe.com/articles/out-of-body-experience-with-turbo">‚ÄúOut of body experience with turbo‚Äù</a> about DOM connect/disconnects during Turbo Drive</li>
</ul>

<p>And general nits that otherwise would necessitate less delicate coding.</p>

<ul>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/50039">Add ability to detect a half-open connection</a> by adding a client <code>pong</code> to the existing server <code>ping</code>. Action Cable currently <a href="https://github.com/rails/rails/blob/4b494a53e1e10f0c523266c38d4f7f22b40fa021/actioncable/app/javascript/action_cable/connection.js#L142-L143">filters out ping messages</a>, so not possible to do a pong or heartbeat without a change or patch.</li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/44653">ActionCable: Subscribe uniquely</a> about weird behavior when  subscriptions with duplicated identifiers happen</li>
  <li><code>hotwired/turbo-rails</code>: <a href="https://github.com/hotwired/turbo-rails/issues/559">‚ÄúDuplicate requests from repeated turbo-cable-stream-source signed-stream-name values‚Äù</a></li>
  <li><code>hotwired/stimulus</code> <a href="https://github.com/hotwired/stimulus/issues/698">How to know when every stimulus controllers are connected ?</a></li>
</ul>

<p>I ended up making a whole new custom element <code>data-permanent-cable-stream-source</code>. All that to wait a tick before actually unsubscribing the channel in case the element is reconnected to the page again by <code>data-turbo-permanent</code>. What does that mean for unload events? Beats me for now.</p>

<h3 id="what-am-i-doing-about-it">What am I doing about it?</h3>

<p>All this work did generate some upstream issues and PRs. I mostly worked around them in my own app, but maybe we‚Äôll roll the rock uphill a little bit:</p>

<ul>
  <li><code>hotwired/turbo-rails</code>: <a href="https://github.com/hotwired/turbo-rails/pull/756">Allow <code>turbo-cable-stream-source</code> to be compatible with <code>data-turbo-permanent</code></a></li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/55825">Fix Action Cable <code>after_subscribe</code> callback to call after deferred subscription confirmation transmit</a></li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/55824">Add <code>success_callback</code> to Action Cable‚Äôs <code>stream_from</code> and <code>stream_to</code></a></li>
  <li><code>reclaim-the-stack/actioncable-enhanced-postgresql-adapter</code>: <a href="https://github.com/reclaim-the-stack/actioncable-enhanced-postgresql-adapter/pull/6">Fix incorrect escaping of large payloads</a></li>
</ul>

<h3 id="notes-right">Notes, right?</h3>

<p>Yep, these are my notes. Maybe they‚Äôre helpful. No big denouement. The feature works, I‚Äôm happy with it, my teammates are happy, and I probably wouldn‚Äôt have attempted it at all if I didn‚Äôt have such positive thoughts about Action Cable going in, even if the work itself got deeply into the weeds.</p>


          ]]>
        </description>
        <link>https://island94.org/2025/10/notes-from-building-a-who-is-doing-what-right-now-on-our-website-presence-feature-with-action-cable</link>
        <guid isPermaLink="true">https://island94.org/2025/10/notes-from-building-a-who-is-doing-what-right-now-on-our-website-presence-feature-with-action-cable</guid>
        <pubDate>Mon, 06 Oct 2025 14:59:00 +0000</pubDate>
      </item>
      <item>
        <title>Serializing ViewComponent for Active Job and Turbo broadcast later</title>
        <description>
          <![CDATA[
          <p>I recently started using ViewComponent. I‚Äôve been gradually removing non-omikase libraries from my Rails applications over the past decade, but ViewComponent is alright. I was strongly motivated by Boring Rails‚Äô <a href="https://boringrails.com/articles/self-updating-components/">‚ÄúHotwire components that refresh themselves‚Äù</a>, cause matching up all the dom ids and stream targets between views/partials and ‚Ä¶. wherever you put your Stream and Broadcast renderers is a pain.</p>

<p>You might be familiar with me as the GoodJob author. So of course I wanted to have my Hotwire components refresh themselves <em>later</em> and move stream broadcast rendering into a background job. I simply call <code>MessagesComponent.add_message(message)</code> and broadcasts an update <em>later</em> to the correct stream and target that are all nice and local when defined inside the View Component:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessageListComponent</span> <span class="o">&lt;</span> <span class="no">ApplicationComponent</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">user</span>
    <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_action_later_to</span><span class="p">(</span>
      <span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">,</span>
      <span class="ss">action: :append</span><span class="p">,</span>
      <span class="ss">target: </span><span class="no">ActionView</span><span class="o">::</span><span class="no">RecordIdentifier</span><span class="p">.</span><span class="nf">dom_id</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">),</span>
      <span class="ss">renderable: </span><span class="no">MessageComponent</span><span class="p">.</span><span class="nf">serializable</span><span class="p">(</span><span class="ss">message: </span><span class="n">message</span><span class="p">),</span> <span class="c1"># &lt;- that right there</span>
      <span class="ss">layout: </span><span class="kp">false</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">:,</span> <span class="n">messages</span><span class="p">:)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="n">messages</span>
  <span class="k">end</span>

  <span class="n">erb_template</span> <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
    &lt;%= helpers.turbo_stream_from @user, :message_list %&gt;
    &lt;div id="&lt;%= dom_id(@user, :message_list) %&gt;"&gt;
      &lt;%= render MessageComponent.with_collection @messages %&gt;
    &lt;/div&gt;
</span><span class="no">  HTML</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That‚Äôs a simple example.</p>

<h3 id="making-a-renderable-work-later">Making a renderable work <em>later</em></h3>

<p>The ViewComponent team can be really proud of <a href="https://github.com/rails/rails/pull/37919">adding first-class support to Rails</a> for a library like ViewComponent. Rails already supported views and partials and now it also supports an object that quacks like a <code>renderable</code>  .</p>

<p>For ViewComponent to be compatible with Turbo Broadcasting <em>later</em>, those View Components need to be serializable by Active Job. That‚Äôs because Turbo Rail‚Äôs <code>broadcast_*_later_to</code> takes the arguments it was passed and serializes them into a job so they can be run elsewhere better/faster/stronger.</p>

<p>To serialize a ViewComponent, we need to collect its initialization arguments so that we can reconstitute it in that <em>elsewhere</em> place where the job is executed and the ViewComponent is re-initialized. To initialize a ViewComponent, you call <code>new</code> which calls its  <code>initialize</code> method. To patch into that, there are a couple of different strategies I thought of taking:</p>

<ul>
  <li>
    <p>Make the developer figure out which properties of an existing ViewComponent (ivars, attributes) should be grabbed and how to do that.</p>
  </li>
  <li>
    <p><code>prepend</code> a module method in front of <code>ViewComponent#initialize</code>. Our module would always have to be at the top of the ancestors hierarchy, because subclasses might overload <code>initialize</code> themselves, so we‚Äôd have to have an <code>inherited</code> callback that would prepend the module (again) every time that happened</p>
  </li>
  <li>
    <p>Simply initialize the ViewComponent via another, more easily interceptable method, when you want it to be serializable.</p>
  </li>
</ul>

<p>I respect that ViewComponent maintainers really want a ViewComponent to be <em>just like any other Ruby object</em> that you create with <code>new</code> and <code>initialize</code> , but it makes this particular goal, serialization, rather difficult. You can maybe see the ViewComponent maintainers ran into a few problems with initialization themselves: a collection of ViewComponents can optionally have each member initialized with an iteration number, but to do that <a href="https://github.com/ViewComponent/view_component/blob/1ed16e33ad70e45ffc08de3b68760a83d08e912e/lib/view_component/base.rb#L667-L712">ViewComponent has to introspect the <code>initialize</code> parameters</a>  to determine if the object implements the iteration parameter to decide whether to send it ü´† That parameter introspection also means that we can‚Äôt simply prepend a redefined generic <code>initialize(*args, **kwargs)</code> because that would break the collection feature. Not great üíõ</p>

<p>So, given the compromises I‚Äôm willing to make between ergonomics and complexity and performance, given my abilities, and my experience, and what I know at this time‚Ä¶. I decided to simply make a new initializing class method, named <code>serializable</code>. If I want my ViewComponent to be serializable, I initialize it with <code>MyComponent.serializable(foo, bar:)</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/view_component.rb</span>
<span class="c1">#</span>
<span class="c1"># Instantiate a ViewComponents that is (optionally) serializable by Active Job</span>
<span class="c1"># but otherwise behaves like a normal ViewComponent. This allows it to be passed</span>
<span class="c1"># as a renderable into `broadcast_action_later_to`.</span>
<span class="c1">#</span>
<span class="c1"># To use, include the `ViewComponent::Serializable` concern:</span>
<span class="c1">#</span>
<span class="c1">#  class ApplicationComponent &lt; ViewComponent::Base</span>
<span class="c1">#    include ViewComponent::Serializable</span>
<span class="c1">#  end</span>
<span class="c1">#</span>
<span class="c1"># And then call `serializable` instead of `new` when instantiating:</span>
<span class="c1">#</span>
<span class="c1">#   Turbo::StreamsChannel.broadcast_action_later_to(</span>
<span class="c1">#     :admin, user, :messages,</span>
<span class="c1">#     action: :update,</span>
<span class="c1">#     target: ActionView::RecordIdentifier.dom_id(user, :messages),</span>
<span class="c1">#     renderable: MessageComponent.serializable(message: message)</span>
<span class="c1">#   )</span>
<span class="c1">#</span>
<span class="k">module</span> <span class="nn">ViewComponent</span>
  <span class="k">module</span> <span class="nn">Serializable</span>
    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

    <span class="n">included</span> <span class="k">do</span>
      <span class="nb">attr_reader</span> <span class="ss">:serializable_args</span>
    <span class="k">end</span>

    <span class="n">class_methods</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nf">serializable</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">).</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">instance</span><span class="o">|</span>
          <span class="n">instance</span><span class="p">.</span><span class="nf">instance_variable_set</span><span class="p">(</span><span class="ss">:@serializable_args</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">ruby2_keywords</span><span class="p">(</span><span class="ss">:serializable</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ViewComponentSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">ObjectSerializer</span>
  <span class="k">def</span> <span class="nf">serialize?</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
    <span class="n">argument</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">ViewComponent</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">argument</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:serializable_args</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span>
      <span class="s2">"component"</span> <span class="o">=&gt;</span> <span class="n">view_component</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span>
      <span class="s2">"arguments"</span> <span class="o">=&gt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">.</span><span class="nf">serializable_args</span><span class="p">),</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="nb">hash</span><span class="p">[</span><span class="s2">"component"</span><span class="p">].</span><span class="nf">safe_constantize</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">[</span><span class="s2">"arguments"</span><span class="p">]))</span>
  <span class="k">end</span>

  <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="p">.</span><span class="nf">add_serializers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Real talk:</strong> I haven‚Äôt packaged this into a gem. I didn‚Äôt want to maintain it for everyone, and there are some View Component features (like collections) it doesn‚Äôt handle yet because I haven‚Äôt used them (yet). I think this sort of thing is first-class behavior for the current state of Rails and Active Job and Turbo, and I‚Äôd rather the library maintainers figure out what the best balance of ergonomics, complexity, and performance is for them. I‚Äôve been gently poking them about it in their Slack; they‚Äôre great üíñ</p>

          ]]>
        </description>
        <link>https://island94.org/2025/09/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</link>
        <guid isPermaLink="true">https://island94.org/2025/09/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</guid>
        <pubDate>Sun, 14 Sep 2025 14:17:00 +0000</pubDate>
      </item>
      <item>
        <title>Building deterministic, reproducible assets with Sprockets</title>
        <description>
          <![CDATA[
          <p>This is a story that begins with airplane wifi, and ends with the recognition that everything is related in web development.</p>

<p>While on slow airplane wifi, I was syncing this blog‚Äôs git repo, and it was taking forever. That was surprising because this blog is mostly text, which I expected shouldn‚Äôt require many bits to transfer for Git. Looking more deeply into it (I had a 4-hour flight), I discovered that the vast majority of the bits were in the git branch of built assets that gets deployed to GitHub Pages (<code>gh-pages</code>) when I build my Rails app into a static site <a href="https://island94.org/2025/01/living-parklife-with-rails-coming-from-jekyll">with Parklife</a>. And the bits in that branch were assets (css, javascript, and a few icons and fonts) built by Sprockets, whose contents were changing every time the blog was built and published. What changed?</p>

<ul>
  <li>Sprockets creates a file manifest that is randomly named <code>".sprockets-manifest-#{SecureRandom.hex(16)}.json"</code>.</li>
  <li>Within the file manifest, there is an entry for every file built by Sprockets, that includes that original asset‚Äôs <code>mtime</code>‚Äîwhen the file on the filesystem was last touched, even if the contents didn‚Äôt change.</li>
  <li>By default, Sprockets generates gzipped <code>.gz</code> copies of compressible assets, and it includes the uncompressed file‚Äôs <code>mtime</code> in the gzipped file‚Äôs header, producing different binary content even though the compressed payloads‚Äô contents didn‚Äôt change.</li>
</ul>

<p>Do I need that? Let‚Äôs go through it.</p>

<h3 id="the-sprockets-manifest">The Sprockets Manifest</h3>

<p>The Sprockets Manifest is pretty cool (I mean <code>public/assets/.sprockets-manifest-*.json</code>, not <code>app/assets/config/manifest.js</code> which is different). The manifest is how Sprockets is able to add unique cache-breaking digests to each file while still remembering what the file was originally named. When building assets on a server with a persisted filesystem, Sprockets also uses the manifest to keep <em>old</em> versions of files around: <code>bin/rails assets:clean</code> will keep the last 3 versions of built assets, which is helpful for blue-green deployments. Heroku also has a <a href="https://devcenter.heroku.com/articles/rails-4-asset-pipeline#multiple-versions">bunch of custom stuff</a> powered by this too to make deployments seamless.</p>

<p>But none of that is applicable to me and this blog, which gets built from scratch and committed to Git. Or for that matter, when I build some of my other Rails apps with Docker; not unnecessarily busting my cached file layers would be nice üíÖ</p>

<p>The following is a monkeypatch, which works with Sprockets <em>right now</em> but I‚Äôm hoping to ultimately propose as a configuration option upstream (as others <a href="https://github.com/rails/sprockets/issues/707">have proposed</a>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="k">module</span> <span class="nn">SprocketsManifestExt</span>
  <span class="k">def</span> <span class="nf">generate_manifest_path</span>
    <span class="c1"># Always generate the same filename</span>
    <span class="s2">".sprockets-manifest-</span><span class="si">#{</span><span class="s1">'0'</span> <span class="o">*</span> <span class="mi">32</span><span class="si">}</span><span class="s2">.json"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">save</span>
    <span class="c1"># Use the epoch as the mtime for everything</span>
    <span class="n">zero_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">utc</span>
    <span class="vi">@data</span><span class="p">[</span><span class="s2">"files"</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">_path</span><span class="p">,</span> <span class="n">asset</span><span class="p">)</span><span class="o">|</span>
      <span class="n">asset</span><span class="p">[</span><span class="s2">"mtime"</span><span class="p">]</span> <span class="o">=</span> <span class="n">zero_time</span>
    <span class="k">end</span>

    <span class="k">super</span>
  <span class="k">end</span>

  <span class="no">Sprockets</span><span class="o">::</span><span class="no">Manifest</span><span class="p">.</span><span class="nf">prepend</span> <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, if you‚Äôre like me (on a plane), you might be curious about why the obsessive tracking of <code>mtime</code>. I have worked alongside several people in my career with content-addressable storage obsessions. The idea being: focus on the contents, not the container. And <code>mtime</code> is very much a concern of the <em>container</em>. But Sprockets <a href="https://github.com/rails/sprockets/blob/58759051635c3d660421908702b6ade729dd4ab8/README.md#cache">makes the case</a> that ‚ÄúCompiling assets is slow‚Äù so I can see it‚Äôs useful to quickly check when the file was modified, in a lot of cases‚Ä¶ but not mine.</p>

<p>Let‚Äôs move on.</p>

<h3 id="gzip-but-maybe-you-dont-need-it">GZip, but maybe you don‚Äôt need it</h3>

<p>So‚Ä¶ everything in web development is connected. While wondering why new copies of every <code>.gz</code> file were being committed on every build, I remembered what my buddy Rob recently did in Rails: <a href="https://github.com/rails/rails/pull/55382"><code>MakeActiveSupport::Gzip.compress</code>Ôøºdeterministic</a>.</p>

<blockquote>
  <p>I have some tests of code that uses <code>ActiveSupport::Gzip.compress</code> that have been flaky for a long time, and recently discovered this is because the output of that method includes the timestamp of when it was compressed. If two calls with the same input happen during different seconds, then you get different output (so, in my flaky tests, they fail to compare correctly).</p>
</blockquote>

<p>GZip takes a parameter called <code>mtime</code>, which is stored and changes the timestamp of the compressed file(s) <em>when they are uncompressed</em>. It changes the <em>content</em> of the gzipped file, because it stores the timestamp in the contents of the file, but doesn‚Äôt affect the mtime of the gzipped file <em>container</em>.</p>

<p>So in the case of Sprockets, if the modification date of the uncompressed asset changes, regardless of whether its contents have changed, a new and different (according to git or Docker) gzipped file will be generated. This was <em>really</em> bloating up my git repo.</p>

<p>Props to Rack maintainer Richard Schneeman who <a href="https://github.com/rails/sprockets/pull/197#issuecomment-162954641">dug further down this hole previously</a>, admirably asking the zlib group themselves for advice. The commentary made a mention of nginx docs, which I assume is for <a href="https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html"><code>ngx_http_gzip_static_module</code></a> which says:</p>

<blockquote>
  <p>The files can be compressed using the gzip command, or any other compatible one. It is recommended that the modification date and time of the original and compressed files be the same.</p>
</blockquote>

<p>But that‚Äôs not <code>GZip#mtime</code> value stored inside the contents of the gzip file, that‚Äôs the mtime of the <code>.gz</code> file container. Sprockets <em>also</em> sets that, with <a href="https://github.com/rails/sprockets/blob/4dff018b9271c37b09889e829f8926d1c5379731/lib/sprockets/utils/gzip.rb#L19C11-L19C22"><code>File.utime</code></a>.</p>

<p>It‚Äôs easy enough to patch the mtime to the ‚Äúunknown‚Äù value of <code>0</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="k">module</span> <span class="nn">SprocketsGzipExt</span>
  <span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">_target</span><span class="p">)</span>
    <span class="n">archiver</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="kp">nil</span>
  <span class="k">end</span>

  <span class="no">Sprockets</span><span class="o">::</span><span class="no">Utils</span><span class="o">::</span><span class="no">Gzip</span><span class="p">.</span><span class="nf">prepend</span> <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>‚Ä¶though if you‚Äôre in my shoes, you might not even need these gzipped assets. afaict only Nginx makes use of them with the non-default <code>ngx_http_gzip_static_module</code> module; Apache requires some complicated RewriteRules; Puma doesn‚Äôt serve them, CDNs don‚Äôt request them. Maybe turn them off? ü§∑</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">gzip</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Fun fact: <a href="https://github.com/rails/sprockets-rails/pull/551">that configuration was undocumented</a></p>

<h3 id="maybe-please-dont-even-pass-mtime-to-gzip-for-web-assets">Maybe please don‚Äôt even pass <code>mtime</code> to gzip for web assets</h3>

<p>All of this stuff about file modification dates reminded me of <em>another</em> thing I had once previously rabbit-holed on, which was <a href="https://github.com/feedbin/feedbin/issues/726">poorly behaved conditional requests in RSS Readers</a>. The bad behavior involved inappropriately caching web requests whose Last-Modified HTTP header changed, but their contents didn‚Äôt. And how do webservers generate their Last-Modified header value? That‚Äôs right, file <code>mtime</code>, the one that can be set by <code>File.utime</code>!</p>

<p>‚Ä¶but not the one set by <code>GZip#mtime=</code>. I cannot find any evidence anywhere that value, <em>in the contents of the gzip file</em> matters. Nada. All it does is make the gzip file‚Äôs <em>contents</em> be different, because of that one tiny value being included. I can‚Äôt imagine anything cares about the original mtime when it‚Äôs unzipped, that wasn‚Äôt already transmitted via the Last-Modified HTTP header. What am I missing?</p>

<p>Of the evidence I have, it seems like developers set <code>GZip#mtime=</code>‚Ä¶ because it‚Äôs an option? I couldn‚Äôt find a reason <a href="https://github.com/rack/rack/commit/d2d51ff05966b36c40dc9439437e82d0a23f2b88">in the Sprockets history</a>. I noticed that Rack::Deflater does the same for reasons I haven‚Äôt figured out <a href="https://github.com/rack/rack/commit/d2d51ff05966b36c40dc9439437e82d0a23f2b88">in their history</a> either.  This behavior probably is not busting <em>a lot</em> of content-based caches unnecessarily, but it probably does some. So maybe don‚Äôt do it unless you need to.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/08/building-deterministic-reproducible-assets-with-sprockets</link>
        <guid isPermaLink="true">https://island94.org/2025/08/building-deterministic-reproducible-assets-with-sprockets</guid>
        <pubDate>Tue, 26 Aug 2025 03:03:00 +0000</pubDate>
      </item>
      <item>
        <title>Everything I know about AI, I learned by reading the AWS Bedrock Client Ruby SDK code</title>
        <description>
          <![CDATA[
          <p><em>This essay is a little bit about me and how I solve problems, and a little bit about AI from the perspective of a software developer building AI-powered features into their product.</em></p>

<p>The past week at my startup has been a little different. I spent the week writing a grant application <a href="https://www.publicbenefitinnovationfund.org/summer-2025-open-call.html">for</a> ‚Äúnon-dilutive funding to accelerate AI-enabled solutions that help governments respond to recent federal policy changes and funding constraints in safety net programs.‚Äù It wasn‚Äôt particurly difficult, as we‚Äôre already deep into doing the work üíÖ ‚Ä¶but it was an interesting experience breaking that work down into discrete 250-word responses, all 17 (!) of them on the grant application.</p>

<p>One of my friends is a reviewer panelist (she‚Äôll recuse herself from our proposal), and I was explaining my struggle to find an appropriate level of detail. Comparing an answer like:</p>

<blockquote>
  <p>‚Ä¶we use AWS Bedrock models which are SOC, HIPAA, and Fedramp compatible, and integrated via its SDK which has robust guardrail functions like contextual grounding and output filters that we‚Äôre using to ensure accuracy and safety when producing inferenced text output‚Ä¶</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>‚Ä¶we have robust controls for ensuring the safety and accuracy of AI-powered features‚Ä¶</p>
</blockquote>

<p>That all might sounds like word salad anyways, so I compared it analogously to saying, in the context of web design:</p>

<blockquote>
  <p>‚Ä¶ we‚Äôre designing our application using contemporary HTML and CSS features like media queries, and minimal Javascript via progress enhancement, to be usable and accessible across web browsers on devices from mobile phones to desktop computers‚Ä¶.</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>‚Ä¶.mobile, responsive web design‚Ä¶</p>
</blockquote>

<p>Working and communicating at the correct level of complexity <em>is the work</em>. While I‚Äôm developing software, I tend to be reductive; as the meme goes: <em>I‚Äôm not here to talk. Just put my <a href="https://knowyourmeme.com/editorials/guides/whats-the-just-put-my-fries-in-the-bag-bro-meme-the-viral-catchphrase-and-its-memes-on-tiktok-explained"><del>fries</del></a> http in the bag, bro. My DOM goes in the bag. Just put my Browser Security Model</em> in the bag.</p>

<p>I guess I have the benefit of perspective, working in this field for 20+ years. While things have gotten to layer-upon-layer complexity, I can remember what simple looks and feels likes. It‚Äôs also <em>never</em> been simple.</p>

<p>For example, in the civic tech space, there‚Äôs been lots of times where on one side someone wants to talk about civic platforms and government vending machines and unleashing innovation, and on the other side is a small room with vendor representative that is existentially opposed to adding a reference field to a data specification without which the whole system is irreconcilably unusable. The expansive vision and the tangible work.</p>

<p>I believe, at the core of all of this IT (Information Technology (or ICT, Information and Communications Technology as it‚Äôs known globally), we‚Äôre doing <a href="https://knowyourmeme.com/memes/push-it-somewhere-else-patrick">pushing Patrick</a>: take information from one place, <em>and we push it somewhere else</em>.</p>

<p><img src="/uploads/2025/push-it-patrick.gif" alt="Push it Patrick GIF" /></p>

<p>Take that information from a person via a form, from a sensor, from a data feed, from a process, <em>and push it somewhere else</em>. Sure, we may enrich and transform it and present it differently, and obviously figuring out what is useful and valuable and useable is <em>the work</em>. From the backend to the frontend, and the frontend to the backend. From client to server, from server to server, protocol to protocol, over, under, you get the idea. The work is <em>pushing information somewhere else</em>.</p>

<p><strong>Anyways, about that AI‚Ä¶</strong></p>

<p>From Brian Merchant‚Äôs Blood in the Machine newsletter, describing going to an <a href="https://www.bloodinthemachine.com/p/ai-disagreements">AI retreat thing</a>:</p>

<blockquote>
  <p>I admittedly had a hard time with all this, and just a couple hours in, I began to feel pretty uncomfortable‚Äînot because I was concerned with what the rationalists were saying about AGI, but because my apparent inability to occupy the same plane of reality was so profound. In none of these talks did I hear any concrete mechanism described through which an AI might become capable of usurping power and enacting mass destruction, or a particularly plausible process through which a system might develop to ‚Äúdecide‚Äù to orchestrate mass destruction, or the ways it would navigate and/or commandeer the necessary physical hardware to wreak its carnage via a worldwide hodgepodge of different interfaces and coding languages of varying degrees of obsolescence and systems that already frequently break down while communicating with each other.</p>
</blockquote>

<p>I mean‚Ä¶ exactly. Like what even.</p>

<p>From my own experience of writing that grant application I mentioned at the beginning of this post, and enumerating all of the AI-powered features that we‚Äôve built already, are prototyping, or confidently believe we can deliver in the near-term future‚Ä¶ it‚Äôs quite a lot. And it‚Äôs not that different from anything that‚Äôs come before: building concrete stuff that concretely works. I wrote <a href="https://island94.org/2025/01/how-im-thinking-about-ai-llms">something similar</a> back in January too, so maybe this feeling is here to stay.</p>

<p>The places where I struggled most to write about was in how many places, about trust and safety and risk and capacity‚Ä¶ was explaining how we‚Äôre using functions that are quite simply exposed via the SDK. AWS Bedrock is how Amazon Web Services provides AI models as a billable resource developers can use. The SDK is how you invoke those AI models from your application.  <em>Just put the method signature in the bag.</em>  It‚Äôs all documented: the <code>#converse_stream</code> method, pretty much the only method to use: no joke, has <a href="https://github.com/aws/aws-sdk-ruby/blob/208a24482111145a209ff0a4a8fedf7a802b6993/gems/aws-sdk-bedrockruntime/lib/aws-sdk-bedrockruntime/client.rb#L1583-L2587">1003 lines of documentation above it describing all of the options to pass, and and all of the data that gets returned</a>:</p>

<ul>
  <li>Providing an inference prompt</li>
  <li>Attaching documents</li>
  <li>Tool usage, which is how models can coerced to produce structured output</li>
  <li>Contextual grounding, to coerce the model to use context from the input rather than its foundational training sources.</li>
  <li>Guardrails and safety filters, to do additional checks on the output, sometimes by other models.</li>
  <li>‚Ä¶and all of the limitations and constraints that are very <em>real</em> and <em>tangible</em>. By which I mean  the maximum number of items one can send in an array or the maximum number of bytes that can be sent as a base64-encoded string.</li>
</ul>

<p>Every option is very concretely about passing a simple hash of data in, and getting a hash of data out. <em>Just put the Ruby Hash in the bag.</em></p>

<p>To analogously compare this to one of the oldest and boringest AWS services, the Simple Storage Service, there is, with one hand, waving about how ‚Äúthe capability to store and retrieve an unlimited amount of data will change the world‚Äù and, and then with the other hand precisely ‚Äúoverriding the Content-Type of an S3 file upload‚Äù. Reading the method signature is the latter.</p>

<p>And I don‚Äôt mean to imply everything in that 1003 line docblock is all you need to know. But you might wonder, say ‚ÄúWhen might I want to get a <code>resp.output.message.content[0].citations_content.citations #=&gt; Array</code>?‚Äù and then you google it and go down a rabbit hole to learn that citations are just another form of tool usage and <em><a href="https://repost.aws/questions/QUKwoMWVdCRQ6Y_drrZNXZPg/how-to-have-a-bedrock-agent-reliably-include-knowledge-base-citations-in-the-final-response-of-invokeagent-for-agents-for-amazon-bedrock-runtime">sometimes the model won‚Äôt do it</a></em> which if you keep digging down that rabbit hole everything becomes evident that these are, at heart, still probabilistic text generators that are useful and interesting <em>in the same way S3 is useful and interesting, and also isn‚Äôt.</em>  It‚Äôs a totally different conversation.</p>

<p>So, if there‚Äôs any takeways to be had here:</p>

<ul>
  <li>This stuff is as boringly useful as any other AWS service is or isn‚Äôt, if you‚Äôre familiar with the vast number of AWS services.</li>
  <li>It‚Äôs maybe embarrassing to write about in tangible form because it‚Äôs already been boringly commodified as a service through AWS.</li>
  <li>‚Ä¶and also there are tangible, useful things to be built. And a lot of intellectual joy in breaking down how some high-level feature is built on top of these low-level services.</li>
</ul>

<p>My self-serving interest here is that I‚Äôd love to talk to other folks who are building stuff in Ruby on Rails using AI and LLMs and inference about the boring stuff involved in <em>taking information from one place, and pushing it somewhere else.</em></p>

<p>For example, yesterday I posted in the <a href="https://www.rubyonrails.link/">Ruby on Rails Link Slack</a> <code>#ai-lounge</code> channel:</p>

<blockquote>
  <p>Anyone building AI-powered features into their application? I‚Äôve got an interface for translating a text field into another language, and I was curious if anyone has a pattern they like with Turbo/ActionCable/Stimulus for streaming responses to a particular form for a single client (e.g. there‚Äôs not yet a model record that can be broadcasted from). This is what I‚Äôm doing (hopefully it makes sense üòÖ) ‚Ä¶</p>
</blockquote>

<p>‚Ä¶and I‚Äôm waiting for a response.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</link>
        <guid isPermaLink="true">https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</guid>
        <pubDate>Sat, 09 Aug 2025 21:28:00 +0000</pubDate>
      </item>
      <item>
        <title>Consider Thruster with Puma on Heroku</title>
        <description>
          <![CDATA[
          <p>To briefly catch you up to speed if you haven‚Äôt been minutely tracking Ruby on Rails performance errata: the Puma webserver has some mildly surprising behavior with the order in which it processes and prioritizes requests that are pipelined through keepalive connections; under load, it can lead to unexpected latency.</p>

<p>Heroku wrote <a href="https://www.heroku.com/blog/pumas-routers-keepalives-ohmy/">~3,000 words about this Puma thing</a>, and <a href="https://github.com/puma/puma/issues/3487">very smart people</a> are <a href="https://github.com/puma/puma/pull/3506">working on it</a>. All of this became mildly important because: Heroku upgraded their network router (‚ÄúRouter 2.0‚Äù), which <em>does</em> support connection keepalive, which has the potential to reduce a little bit of latency by reducing the number of TCP handshakes going over Heroku‚Äôs internal network between their router and your application dyno. People want it.</p>

<p>When you read the Heroku blog post (all several thousand words of it), it will suggest working around this with Puma configuration like (1) disabling connection keepalive in Puma or (2) disabling a Puma setting called <code>max_fast_inline</code>, though I‚Äôm pretty sure this has the same effect in Puma as disabling connection keepalives too (last I checked there wasn‚Äôt consensus in Puma as to what parts of the related behavior were intended but surprising, and what was unintended bugs in the logic).</p>

<p>Anyways, there‚Äôs a 3rd option: <strong>use Thruster</strong>.</p>

<ul>
  <li>Requests on the Heroku network between the Heroku router and Thruster running in your application dyno can use connection keepalives (sidenote: I‚Äôm 98% confident Thruster supports keepalives because <a href="https://github.com/basecamp/thruster/blob/10e33f6f5a2476231c00a59be209f7a58e98dc1a/internal/server.go#L9">Go <code>net/http</code></a> enables keepalives by default and Thruster doesn‚Äôt appear to explicitly disable them)</li>
  <li>Requests <em>locally</em> within your application dyno between Thruster and Puma can disable connection keepalive and there shouldn‚Äôt be any network latency for the TCP handshake because it‚Äôs all happening locally in the dyno.</li>
</ul>

<p>No one else seems to be blogging about this‚Äîa fact pointed out when I suggested this in the Rails Performance Slack. So here ya go.</p>

<ol>
  <li>Add the <code>thruster</code> <a href="https://github.com/basecamp/thruster">gem</a></li>
  <li>Update your Procfile: <code>web: HTTP_PORT=$PORT TARGET_PORT=3001 bundle exec thrust bin/rails server</code></li>
  <li>Disable Puma‚Äôs keepalives: <code>enable_keep_alives false</code></li>
</ol>

<p>I was already using Thruster with Puma on Heroku because of the benefits of x-sendfile support. If you‚Äôre worried about resource usage (because Thruster is yet another process) it‚Äôs been pretty minimal. I looked just now on one app and 13MB for Thruster next to 200MB for the Rails app running in Puma; seems tiny to me.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku ps:exec <span class="nt">-a</span> APPNAME
<span class="c"># ....</span>
<span class="nv">$ </span>ps <span class="nt">-eo</span> rss,pss,cmd
  RSS   PSS CMD
    4     0 ps-run
11324 12792 /app/vendor/bundle/ruby/3.4.0/gems/thruster-0.1.14-x86_64-linux/exe/
 2960  1095 sshd: /usr/sbin/sshd <span class="nt">-f</span> /app/.ssh/sshd_config <span class="nt">-o</span> Port 1092 <span class="o">[</span>listener
 2220   407 /bin/bash <span class="nt">-l</span> <span class="nt">-c</span> <span class="nv">HTTP_PORT</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nv">TARGET_PORT</span><span class="o">=</span>3001 bundle <span class="nb">exec </span>thrust
199336 187215 puma 6.6.0 <span class="o">(</span>tcp://0.0.0.0:3001<span class="o">)</span> <span class="o">[</span>app]
 8316  1821 ssh <span class="nt">-o</span> <span class="nv">ServerAliveInterval</span><span class="o">=</span>30 <span class="nt">-o</span> <span class="nv">ServerAliveCountMax</span><span class="o">=</span>3 <span class="nt">-o</span> HostKeyAlg
 9172  6346 skylightd
 8244  1367 sshd: u16321 <span class="o">[</span>priv]
 5548  1296 sshd: u16321@pts/0
 4444  1178 <span class="nt">-bash</span>
 4036  1964 ps <span class="nt">-eo</span> rss,pss,cmd
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</link>
        <guid isPermaLink="true">https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</guid>
        <pubDate>Fri, 25 Jul 2025 18:18:00 +0000</pubDate>
      </item>
      <item>
        <title>How to customize Rails I18n key suffixes like¬†`_md`¬†for Markdown</title>
        <description>
          <![CDATA[
          <p>If you‚Äôve had reason to use internationalization in Rails on Rails, you‚Äôve probably used a <a href="https://guides.rubyonrails.org/i18n.html#using-safe-html-translations">nifty feature</a> of it:</p>

<blockquote>
  <p>Keys with a <code>_html</code> suffix‚Ä¶ are marked as HTML safe. When you use them in views the HTML will not be escaped.</p>
</blockquote>

<p>Authoring HTML within translations can be a pain because HTML is quite verbose and easy to mess up when maintaining multiple versions of the same phrase, or paragraph, or page across multiple languages.</p>

<p>It would be nice üíÖ to have something like this:</p>

<blockquote>
  <p>Keys with a <code>_md</code> suffix can be authored in Markdown and will be automatically converted to HTML and marked as HTML safe.</p>
</blockquote>

<p>Markdown is a lot less verbose than HTML and easier to write and eyeball. Let‚Äôs do it!</p>

<p>First, we have to patch into the I18n <code>translate</code> method. It looks something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; -(2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Fun Fact:</strong> Rails does a clever thing to detect missing translations. I18n accepts a stack of fallback defaults, and Rails <a href="https://github.com/rails/rails/pull/45572">appends a magic number</a> to the back of that stack: <code>-(2**60) =&gt; -1152921504606846976</code>. If a translation ever returns that value, Rails assumes that the translation fell through the entire fallback stack and is therefore missing. (It took me a bit of sleuthing to figure out what the heck this weird number meant while poking around.)</p>

<p>Second, we patch the Rails HTML Safe behavior to <em>also</em> make these strings HTML safe too:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
</code></pre></div></div>

<p>That‚Äôs pretty much it!</p>

<p>If you‚Äôre uncomfortable patching things, Tim Masliuchenko has a gem called  <a href="https://github.com/timfjord/i18n-transformers"><code>I18n::Transformers</code></a> that makes it easy create custom key-based transformations. I believe you‚Äôll still need to patch into the HTML safety behavior of Rails though‚Äîand anything involving marking things as HTML-safe should be always be scrutinized for <a href="https://guides.rubyonrails.org/security.html#cross-site-scripting-xss">XSS</a> potential.</p>

<p>Here‚Äôs the full initializer I have, including how I get Kramdown to create ‚Äúinline‚Äù markdown:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"Can't provide both text and block"</span> <span class="k">if</span> <span class="n">text</span> <span class="o">&amp;&amp;</span> <span class="nb">block_given?</span>

    <span class="n">text</span> <span class="o">=</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="k">return</span> <span class="s2">""</span> <span class="k">unless</span> <span class="n">text</span>

    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">strip_heredoc</span>
    <span class="n">options</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">reverse_merge</span><span class="p">(</span>
      <span class="ss">auto_ids: </span><span class="kp">false</span><span class="p">,</span>
      <span class="ss">smart_quotes: </span><span class="p">[</span><span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">]</span> <span class="c1"># disable smart quotes</span>
    <span class="p">)</span>
    <span class="no">Kramdown</span><span class="o">::</span><span class="no">Document</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">options</span><span class="p">).</span><span class="nf">to_html</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="p">)</span>
    <span class="c1"># Custom input parser defined in Kramdown::Parser::Inline</span>
    <span class="n">convert</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="ss">input: </span><span class="s2">"Inline"</span><span class="p">,</span> <span class="o">**</span><span class="p">).</span><span class="nf">strip</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; (2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>

<span class="c1"># Generate HTML from Markdown without any block-level elements (p, etc.)</span>
<span class="c1"># http://stackoverflow.com/a/30468100/241735</span>
<span class="k">module</span> <span class="nn">Kramdown</span>
  <span class="k">module</span> <span class="nn">Parser</span>
    <span class="k">class</span> <span class="nc">Inline</span> <span class="o">&lt;</span> <span class="no">Kramdown</span><span class="o">::</span><span class="no">Parser</span><span class="o">::</span><span class="no">Kramdown</span>
      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
        <span class="k">super</span>
        <span class="vi">@block_parsers</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</link>
        <guid isPermaLink="true">https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</guid>
        <pubDate>Wed, 16 Jul 2025 10:00:00 +0000</pubDate>
      </item>
      <item>
        <title>Is everyone ok at the gemba</title>
        <description>
          <![CDATA[
          <p>The following is the bones of a half-written essay I‚Äôve had kicking around in my drafts for the past 3 years, occassionally updated. I recently read <em>two</em> things that said it all better anyways, but if you read through you get my perspectives as someone in software cooking the goose.</p>

<p>One:  Albert Burneko‚Äôs <a href="https://defector.com/toward-a-theory-of-kevin-roose">‚ÄúToward a theory of Kevin Roose‚Äù</a>:</p>

<blockquote>
  <p>My suspicion, my awful awful newfound theory, is that there are people with a sincere and even kind of innocent belief that we are all just picking winners, in everything: that ideology, advocacy, analysis, criticism, affinity, even taste and style and association are essentially predictions. That what a person tries to do, the essential task of a person, is to identify who and what is going to come out on top, and align with it. The rest‚Äîwhat you say, what you do‚Äîis just enacting your pick and working in service to it.</p>

  <p>‚Ä¶. To these people this kind of thing is not cynicism, both because they believe it‚Äôs just what everybody is doing and because they do not regard it as ugly or underhanded or whatever. Making the right pick is simply being smart. And not necessarily in some kind of edgy-cool or subversive way, but smart the very same shit-eating way that the dorkus malorkus who gets onto a friendly first-name basis with the middle-school assistant principal is smart. They just want to be smart.</p>

  <p>So these people look at, say, socialists, and they see fools‚Äînot because of moral or ethical objections to socialism or whatever, or because of any authentically held objections or analysis at all, but simply because they can see that, at present, socialism is not winning. All the most powerful guys are against it. Can‚Äôt those fools see it? They have picked a loser. They should pick the winner instead.</p>
</blockquote>

<p>Two: Ed Zitrain‚Äôs <a href="https://www.wheresyoured.at/make-fun-of-them/">‚ÄúMake fun of them‚Äù</a> (emphasis in the original):</p>

<blockquote>
  <p>In my opinion, there‚Äôs nothing more cynical than watching billions of people get shipped increasingly-shitty and expensive solutions and then¬†<strong>get defensive of the people shipping them,</strong>¬†and hostile to the people who are complaining that the products they use suck<strong>.</strong>¬†</p>
</blockquote>

<h3 id="in-the-day-to-day">In the day to day</h3>

<p>One of the standard questions in my manager/executive interview kit is:</p>

<p><em>Walk me through what a good day looks like for you if this were your ideal job? And based on past experience, walk me through a bad day?</em> (yes, this is described in the Phoenix Project)</p>

<p>With some prodding, I want sus out how they think about a mix of group meetings, 1:1s, and heads down time. And ideally that the candidate can articulate some concrete artifacts of work (canned meetings, documents, etc.).</p>

<ul>
  <li>An excerpt of a good answer: Promoting someone up a level is really satisfying. Being in a calibration meeting where I‚Äôm presenting the packet my report and I developed together. I‚Äôve designed promotion processes before and building an agenda for that meeting is a lot of fun. Do you have a career ladder here? I spend a lot of time doing gap analyses. I‚Äôll spend at least a few hours every week running through my notes.</li>
  <li>An excerpt of a bad answer: Promoting someone up a level is really satisfying. It‚Äôs important people are recognized for their work.</li>
</ul>

<p>Good answers usually have jumping off points to talk about working and communication styles: ‚Äúoh, is that something you‚Äôre doing over chat or email or in a shared document? Is that a repeating thing or as needed? How would you pull that together?‚Äù Bad answers usually stay at the general level (async, mastery, autonomy, meaning, etc.) and just‚Ä¶ stop.</p>

<p>Having done maybe 30 of these interviews over the past decade, I‚Äôve realized there are many people who seem otherwise competent but can‚Äôt talk, concretely, to what they do. Physically. Embodied. Even at a computer, what‚Äôs behind that digital window.</p>

<p>And I say ‚Äúseems competent‚Äù cause, well, I usually pull these questions out at the end of the interview pipeline, and the candidates are otherwise qualified and their previous interviewers liked them enough to advance them to this stage. And even when the company has gone on to hire them, over my objections sometimes based on this question, they haven‚Äôt been <em>the worst</em>. The candidate I interviewed with the most memorably bad answers is now an SVP of Engineering at a major tech company. They‚Äôre doing ok.</p>

<p>But I do think there‚Äôs something there, that‚Äôs indicative of the moment. To break it down, there‚Äôs two awarenesses that I‚Äôm checking for:</p>

<ul>
  <li>Materiality: an awareness of where they <em>are</em> doing the work, and that‚Äôs also sorta doublechecking that they are aware that other people actually exist too. You read enough Ask a Manager and you realize <em>a lot</em> of powerful people struggle with object permanence when someone is outside their sight lines.</li>
  <li>Operationalization: a set of personal playbooks for making things happen. For example, I‚Äôm a big fan of skip 1:1s (when you meet with your report‚Äôs reports, or your manager‚Äôs manager) and will make point of intentionally setting those up. I have lots of opinions about what a minimally-viable-career-progression system looks like: career ladders and performance evaluation processes and calibration meeting agendas and 1:1 templates. Or more discipline specific, like inventories and gapping templates and decision docs,  In any job we don‚Äôt have to use <em>mine</em> but I sorta expect an experienced manager to have them in their back pocket and be interested in talking about them.</li>
</ul>

<p>All of which is to ask: <strong>take me to your gemba</strong>, ideally, and help me understand how it differs from your worst one too. <em><a href="https://en.wikipedia.org/wiki/Gemba">The Gemba</a></em> being the location where the work happens. Pedantically, it‚Äôs where the value is actually created, like the factory floor, but in this knowledge-heavy work‚Ä¶ who can say? Our most valuable assets go home every night, right?</p>

<h3 id="the-ai-in-the-room">The AI in the Room</h3>

<p>All of this comes to mind with the contemporary exhortions of like ‚ÄúAI is mandatory‚Äù and ‚Äúyou must use AI in your job‚Äù sorts of manifestos and the reply-guys of like ‚Äúyou either git gud with AI or you fall behind and end up living in a cave and eating bats.‚Äù</p>

<p>So I take the previous thought of like ‚Äúlots of managers and executives have no idea what their own work actually looks like‚Äù‚Ä¶.</p>

<p>‚Ä¶and my thoughts about my own discipline: how does software get made? <a href="https://arxiv.org/pdf/1802.06321">Nobody knows.</a> On the individual level, it‚Äôs extremely rare to find people doing anything like Extreme Programming and its emphasis on pair programming and rigid collective team practices. In most of my decades of professional experience, software just expected to happen. <a href="https://arxiv.org/abs/2307.13143">Nobody knows.</a></p>

<p>For example, most teams I‚Äôve worked with have huge differences in how individuals approach a problem: what and how much design or plannng they do up front, whether they start with tests or implementation, the order of components they work through, what they consider ‚Äúdone‚Äù. Drill down to the actual hands-on-keyboard-and-eyes-on-screen and editors and IDEs and development tooling are all over the place developer to developer. And no practices for sharing or learning from each other, and rarely interest either (‚Äúit works for me and I expect it would be painful to change‚Äù).</p>

<p>I have to imagine there‚Äôs a relation here, more often than not I‚Äôm talking to software managers and executives. Shared practices just aren‚Äôt <em>a thing</em>.</p>

<p>So I‚Äôll simply say: it‚Äôs weird that AI is <em>the thing</em> to mandate, rather than like a consistent IDE, or testing strategy, or debugger workflow. That <em>this</em> is the thing, when there is so much everything-else that nobody knows.</p>

<h3 id="accountability-kayfabe">Accountability kayfabe</h3>

<p>I‚Äôll admit it‚Äôs easy to take potshots at the weird things tech executive say and do, but I see a pattern here. Just prior to these AI mandates were the layoffs, which had their signature phrase and power pose: ‚ÄúI‚Äôm accountable for this decision.‚Äù</p>

<p>‚ÄúAccountability‚Äù is a funny word as it means to ‚Äúgive an account.‚Äù Y‚Äôknow, explain what happened, what was done, when, and by whom. What‚Äôs funny is that the word has been sort of walked back from actually giving that explaination, to the idea of the burden of having to give that explanation, to just a vibe of like ‚ÄúI‚Äôve got it. This one‚Äôs on me.‚Äù</p>

<p>I noticed that a lot. I‚Äôm <a href="https://aworkinglibrary.com/writing/on-accountability">not the only one</a>.</p>

<p>I think the thing that people wanted to know, employees especially, was just like: materially and operationally, what the hell happened here?! And when there‚Äôs not an answer, there is a reasonable spectrum between active gaslighting on one side and my recognition that the people in charge could actually have no idea and maybe not even the personal capacity to know. It just ended up that way. Things happened.</p>

<h3 id="bringing-it-back-around">Bringing it back around</h3>

<p>I dunno. Just continue asking the ‚Äúcan you show me that?‚Äù ‚Äúcan we look at it together?‚Äù ‚Äúhow do you think that will effect things?‚Äù ‚Äúis there anything you have in mind that I can do to help?‚Äù questions.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/07/is-everyone-ok-at-the-gemba</link>
        <guid isPermaLink="true">https://island94.org/2025/07/is-everyone-ok-at-the-gemba</guid>
        <pubDate>Sat, 05 Jul 2025 17:35:00 +0000</pubDate>
      </item>
      <item>
        <title>Recently, June 29, 2025</title>
        <description>
          <![CDATA[
          <ul>
  <li>We have a new fridge; it is the same model as the old fridge because only that model would fit in the cabinetry. The installers also discovered that the water valve was broken and couldn‚Äôt be shut off; subsequently, the plumber determined that only the handle had snapped. I ordered a completely new water valve to unscrew its handle and attach that handle to the existing valve. In this economy.</li>
  <li>This week in Rails, I went back and replaced most of the places I was using turbo-broadcast-refresh and replaced them with targeted turbo-streams. I also spent a bunch of time trying to make an autogrowing textfield that didn‚Äôt bounce the page up and down which the <code>style.height = auto; style.height = scrollHeight</code>-strategy does with Bootstrap; this was <a href="https://gist.github.com/bensheldon/c68fbc7e7962bde5860ab4b5700585bb">the result</a>.</li>
  <li>I‚Äôm committed to RubyMine Junie over Cursor for AI-assisted coding. I think Cursor does ever-so-slightly better with generated code and the prompting UI, but RubyMine is so far beyond for everything else. I keep sharing this on Reddit, so here‚Äôs <a href="https://gist.github.com/bensheldon/b4fd84f9880b05ae57521beb1297e3a2">my agent guidelines</a> that I symlink into wherever the tool wants it.</li>
  <li>I‚Äôm still reading <em>The Future of Another Timeline</em>. And I started playing Satisfactory.</li>
</ul>

          ]]>
        </description>
        <link>https://island94.org/2025/06/recently-june-29-2025</link>
        <guid isPermaLink="true">https://island94.org/2025/06/recently-june-29-2025</guid>
        <pubDate>Sun, 29 Jun 2025 23:21:00 +0000</pubDate>
      </item>
      <item>
        <title>The difference between Rails Plugins, Extensions, Gems, Railties, and Engines</title>
        <description>
          <![CDATA[
          <p>There‚Äôs overlapping terminology that describes the act of packaging up some new behavior for Rails. I think of two gems I maintain that are of vastly different scales</p>

<ul>
  <li><a href="https://github.com/bensheldon/activerecord-has_some_of_many">Ôøº<code>activerecord-has_some_of_many</code>Ôøº</a> which adds two new tiny association methods to Active Record models in 150 lines of code.</li>
  <li><a href="https://github.com/bensheldon/good_job">GoodJob</a>, which is an entire Active Job backend with a mountable Web Dashboard and database models and custom job extensions in 10k lines of code.</li>
</ul>

<p>I was pondering the different terminology because I recently saw both ends of the spectrum discussed in the community:</p>

<ul>
  <li>A developer on Reddit announced a tiny new gem and a commenter wrote <em>well actually, in your Readme you called it an Engine but you shouldn‚Äôt do that.</em></li>
  <li>I got pinged on <a href="https://github.com/rails/rails/issues/52311">a Rails issue</a> that left me with the belief that some behavior, if <em>not</em> packaged as an Engine, could be expected to break.</li>
</ul>

<p>I think there are only two dimensions to consider when picking the correct terminology:</p>

<ul>
  <li>How the behavior is packaged</li>
  <li>Whether it‚Äôs necessary to package the behavior that way. Which isn‚Äôt even a criticism in my opinion, just an observation.</li>
</ul>

<p>Here‚Äôs my opinionated list, in order of somewhat increasing complexity:</p>

<ul>
  <li><strong>Rails Extension</strong>: A small monkeypatch or tiny new behavior to existing Rails behaviors (Active Record, Active Job, etc.). Especially if it‚Äôs not even a gem: simply a file you wrote a blog post about that gets copied into <code>config/extensions</code> and then <code>require_relative</code>‚Äôd in <code>config/application.rb</code>.</li>
  <li><strong>Rails Gem</strong> : Reductively, a gem is a load path for some code, and some ownership metadata, and maybe it‚Äôs been published to Rubygems.org. Nothing special.</li>
  <li>‚≠êÔ∏è <strong>Rails Plugin</strong>. A generic name covers all situations imo, regardless of size, scope, or complexity.</li>
  <li><strong>Railtie</strong>: When you write a gem that plugs into the Rails framework, you create <a href="https://api.rubyonrails.org/classes/Rails/Railtie.html">special file</a> named <code>lib/railtie.rb</code> that has a class that inherits from `<a href="https://api.rubyonrails.org/classes/Rails/Railtie.html">Rails::Railtie</a>¬†that contains a DSL to configure how your gem‚Äôs behavior interfaces with Rails (configuration, initialization, etc.). I think Railtie is a bit of an odd-duck terminology-wise, but it makes sense considering‚Ä¶</li>
  <li><strong>Rails Engine</strong>: An ‚ÄúEngine‚Äù is <em>nearly</em> identical to a Railtie, but the file is named <code>lib/engine.rb</code> and it has a class that inherits from <code>Rails::Engine</code>. But <code>Rails::Engine</code> itself inherits from <code>Rails::Railtie</code>, so this is a matter of degrees. Your gem absolutely <em>needs</em> to use the Engine behavior if it wants to create mountable routes (though I guess you can mount a vanilla Rack app) or inherit from Rails Base classes like <code>ActiveRecord::Base</code>, <code>ActionController::Base</code>, <code>ActiveJob::Base</code>, etc. which live in the Engine‚Äôs own <code>app/</code> directory.</li>
</ul>

<p>(I‚Äôll clock that the <a href="https://guides.rubyonrails.org/">The Rails Guides</a>, under the ‚ÄúExtending Rails‚Äù section, has separate guides for Plugins and Engines; the former somewhat surprisngly does not mention the latter.)</p>

<p>So if I go back to the two reasons why I wrote this, and try to be strict with this terminology:</p>

<ul>
  <li>If your Plugin <em>has</em> an <code>engine.rb</code> file, it <em>is</em> an Engine. Simple as that. If you don‚Äôt need the Engine-specific behavior, you could package it as a Railtie, but I think the difference is negligible.</li>
  <li>If you don‚Äôt have <em>any</em> dependencies on Rails (outside of maybe ActiveSupport) and don‚Äôt need to hook into the parent application‚Äôs configuration or initialization or framework, then you don‚Äôt need a Railtie or Engine at all. Just say it‚Äôs a gem that‚Äôs compatible with Rails and explain how to use it in that environment.</li>
  <li>Really, do what you want and tell people about it.</li>
</ul>

          ]]>
        </description>
        <link>https://island94.org/2025/06/difference-rails-plugin-extensions-gems-railties-engines</link>
        <guid isPermaLink="true">https://island94.org/2025/06/difference-rails-plugin-extensions-gems-railties-engines</guid>
        <pubDate>Tue, 17 Jun 2025 15:48:00 +0000</pubDate>
      </item>
  </channel>
</rss>
