<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 09 Aug 2025 21:28:00 +0000</pubDate>
    <lastBuildDate>Thu, 14 Aug 2025 00:15:44 +0000</lastBuildDate>
    <generator>Ruby on Rails</generator>
      <item>
        <title>Everything I know about AI, I learned by reading the AWS Bedrock Client Ruby SDK code</title>
        <description>
          <![CDATA[
          <p><em>This essay is a little bit about me and how I solve problems, and a little bit about AI from the perspective of a software developer building AI-powered features into their product.</em></p>

<p>The past week at my startup has been a little different. I spent the week writing a grant application <a href="https://www.publicbenefitinnovationfund.org/summer-2025-open-call.html">for</a> ‚Äúnon-dilutive funding to accelerate AI-enabled solutions that help governments respond to recent federal policy changes and funding constraints in safety net programs.‚Äù It wasn‚Äôt particurly difficult, as we‚Äôre already deep into doing the work üíÖ ‚Ä¶but it was an interesting experience breaking that work down into discrete 250-word responses, all 17 (!) of them on the grant application.</p>

<p>One of my friends is a reviewer panelist (she‚Äôll recuse herself from our proposal), and I was explaining my struggle to find an appropriate level of detail. Comparing an answer like:</p>

<blockquote>
  <p>‚Ä¶we use AWS Bedrock models which are SOC, HIPAA, and Fedramp compatible, and integrated via its SDK which has robust guardrail functions like contextual grounding and output filters that we‚Äôre using to ensure accuracy and safety when producing inferenced text output‚Ä¶</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>‚Ä¶we have robust controls for ensuring the safety and accuracy of AI-powered features‚Ä¶</p>
</blockquote>

<p>That all might sounds like word salad anyways, so I compared it analogously to saying, in the context of web design:</p>

<blockquote>
  <p>‚Ä¶ we‚Äôre designing our application using contemporary HTML and CSS features like media queries, and minimal Javascript via progress enhancement, to be usable and accessible across web browsers on devices from mobile phones to desktop computers‚Ä¶.</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>‚Ä¶.mobile, responsive web design‚Ä¶</p>
</blockquote>

<p>Working and communicating at the correct level of complexity <em>is the work</em>. While I‚Äôm developing software, I tend to be reductive; as the meme goes: <em>I‚Äôm not here to talk. Just put my <a href="https://knowyourmeme.com/editorials/guides/whats-the-just-put-my-fries-in-the-bag-bro-meme-the-viral-catchphrase-and-its-memes-on-tiktok-explained"><del>fries</del></a> http in the bag, bro. My DOM goes in the bag. Just put my Browser Security Model</em> in the bag.</p>

<p>I guess I have the benefit of perspective, working in this field for 20+ years. While things have gotten to layer-upon-layer complexity, I can remember what simple looks and feels likes. It‚Äôs also <em>never</em> been simple.</p>

<p>For example, in the civic tech space, there‚Äôs been lots of times where on one side someone wants to talk about civic platforms and government vending machines and unleashing innovation, and on the other side is a small room with vendor representative that is existentially opposed to adding a reference field to a data specification without which the whole system is irreconcilably unusable. The expansive vision and the tangible work.</p>

<p>I believe, at the core of all of this IT (Information Technology (or ICT, Information and Communications Technology as it‚Äôs known globally), we‚Äôre doing <a href="https://knowyourmeme.com/memes/push-it-somewhere-else-patrick">pushing Patrick</a>: take information from one place, <em>and we push it somewhere else</em>.</p>

<p><img src="/uploads/2025/push-it-patrick.gif" alt="Push it Patrick GIF" /></p>

<p>Take that information from a person via a form, from a sensor, from a data feed, from a process, <em>and push it somewhere else</em>. Sure, we may enrich and transform it and present it differently, and obviously figuring out what is useful and valuable and useable is <em>the work</em>. From the backend to the frontend, and the frontend to the backend. From client to server, from server to server, protocol to protocol, over, under, you get the idea. The work is <em>pushing information somewhere else</em>.</p>

<p><strong>Anyways, about that AI‚Ä¶</strong></p>

<p>From Brian Merchant‚Äôs Blood in the Machine newsletter, describing going to an <a href="https://www.bloodinthemachine.com/p/ai-disagreements">AI retreat thing</a>:</p>

<blockquote>
  <p>I admittedly had a hard time with all this, and just a couple hours in, I began to feel pretty uncomfortable‚Äînot because I was concerned with what the rationalists were saying about AGI, but because my apparent inability to occupy the same plane of reality was so profound. In none of these talks did I hear any concrete mechanism described through which an AI might become capable of usurping power and enacting mass destruction, or a particularly plausible process through which a system might develop to ‚Äúdecide‚Äù to orchestrate mass destruction, or the ways it would navigate and/or commandeer the necessary physical hardware to wreak its carnage via a worldwide hodgepodge of different interfaces and coding languages of varying degrees of obsolescence and systems that already frequently break down while communicating with each other.</p>
</blockquote>

<p>I mean‚Ä¶ exactly. Like what even.</p>

<p>From my own experience of writing that grant application I mentioned at the beginning of this post, and enumerating all of the AI-powered features that we‚Äôve built already, are prototyping, or confidently believe we can deliver in the near-term future‚Ä¶ it‚Äôs quite a lot. And it‚Äôs not that different from anything that‚Äôs come before: building concrete stuff that concretely works. I wrote <a href="https://island94.org/2025/01/how-im-thinking-about-ai-llms">something similar</a> back in January too, so maybe this feeling is here to stay.</p>

<p>The places where I struggled most to write about was in how many places, about trust and safety and risk and capacity‚Ä¶ was explaining how we‚Äôre using functions that are quite simply exposed via the SDK. AWS Bedrock is how Amazon Web Services provides AI models as a billable resource developers can use. The SDK is how you invoke those AI models from your application.  <em>Just put the method signature in the bag.</em>  It‚Äôs all documented: the <code>#converse_stream</code> method, pretty much the only method to use: no joke, has <a href="https://github.com/aws/aws-sdk-ruby/blob/208a24482111145a209ff0a4a8fedf7a802b6993/gems/aws-sdk-bedrockruntime/lib/aws-sdk-bedrockruntime/client.rb#L1583-L2587">1003 lines of documentation above it describing all of the options to pass, and and all of the data that gets returned</a>:</p>

<ul>
  <li>Providing an inference prompt</li>
  <li>Attaching documents</li>
  <li>Tool usage, which is how models can coerced to produce structured output</li>
  <li>Contextual grounding, to coerce the model to use context from the input rather than its foundational training sources.</li>
  <li>Guardrails and safety filters, to do additional checks on the output, sometimes by other models.</li>
  <li>‚Ä¶and all of the limitations and constraints that are very <em>real</em> and <em>tangible</em>. By which I mean  the maximum number of items one can send in an array or the maximum number of bytes that can be sent as a base64-encoded string.</li>
</ul>

<p>Every option is very concretely about passing a simple hash of data in, and getting a hash of data out. <em>Just put the Ruby Hash in the bag.</em></p>

<p>To analogously compare this to one of the oldest and boringest AWS services, the Simple Storage Service, there is, with one hand, waving about how ‚Äúthe capability to store and retrieve an unlimited amount of data will change the world‚Äù and, and then with the other hand precisely ‚Äúoverriding the Content-Type of an S3 file upload‚Äù. Reading the method signature is the latter.</p>

<p>And I don‚Äôt mean to imply everything in that 1003 line docblock is all you need to know. But you might wonder, say ‚ÄúWhen might I want to get a <code>resp.output.message.content[0].citations_content.citations #=&gt; Array</code>?‚Äù and then you google it and go down a rabbit hole to learn that citations are just another form of tool usage and <em><a href="https://repost.aws/questions/QUKwoMWVdCRQ6Y_drrZNXZPg/how-to-have-a-bedrock-agent-reliably-include-knowledge-base-citations-in-the-final-response-of-invokeagent-for-agents-for-amazon-bedrock-runtime">sometimes the model won‚Äôt do it</a></em> which if you keep digging down that rabbit hole everything becomes evident that these are, at heart, still probabilistic text generators that are useful and interesting <em>in the same way S3 is useful and interesting, and also isn‚Äôt.</em>  It‚Äôs a totally different conversation.</p>

<p>So, if there‚Äôs any takeways to be had here:</p>

<ul>
  <li>This stuff is as boringly useful as any other AWS service is or isn‚Äôt, if you‚Äôre familiar with the vast number of AWS services.</li>
  <li>It‚Äôs maybe embarrassing to write about in tangible form because it‚Äôs already been boringly commodified as a service through AWS.</li>
  <li>‚Ä¶and also there are tangible, useful things to be built. And a lot of intellectual joy in breaking down how some high-level feature is built on top of these low-level services.</li>
</ul>

<p>My self-serving interest here is that I‚Äôd love to talk to other folks who are building stuff in Ruby on Rails using AI and LLMs and inference about the boring stuff involved in <em>taking information from one place, and pushing it somewhere else.</em></p>

<p>For example, yesterday I posted in the <a href="https://www.rubyonrails.link/">Ruby on Rails Link Slack</a> <code>#ai-lounge</code> channel:</p>

<blockquote>
  <p>Anyone building AI-powered features into their application? I‚Äôve got an interface for translating a text field into another language, and I was curious if anyone has a pattern they like with Turbo/ActionCable/Stimulus for streaming responses to a particular form for a single client (e.g. there‚Äôs not yet a model record that can be broadcasted from). This is what I‚Äôm doing (hopefully it makes sense üòÖ) ‚Ä¶</p>
</blockquote>

<p>‚Ä¶and I‚Äôm waiting for a response.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</link>
        <guid isPermaLink="true">https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</guid>
        <pubDate>Sat, 09 Aug 2025 21:28:00 +0000</pubDate>
      </item>
      <item>
        <title>Consider Thruster with Puma on Heroku</title>
        <description>
          <![CDATA[
          <p>To briefly catch you up to speed if you haven‚Äôt been minutely tracking Ruby on Rails performance errata: the Puma webserver has some mildly surprising behavior with the order in which it processes and prioritizes requests that are pipelined through keepalive connections; under load, it can lead to unexpected latency.</p>

<p>Heroku wrote <a href="https://www.heroku.com/blog/pumas-routers-keepalives-ohmy/">~3,000 words about this Puma thing</a>, and <a href="https://github.com/puma/puma/issues/3487">very smart people</a> are <a href="https://github.com/puma/puma/pull/3506">working on it</a>. All of this became mildly important because: Heroku upgraded their network router (‚ÄúRouter 2.0‚Äù), which <em>does</em> support connection keepalive, which has the potential to reduce a little bit of latency by reducing the number of TCP handshakes going over Heroku‚Äôs internal network between their router and your application dyno. People want it.</p>

<p>When you read the Heroku blog post (all several thousand words of it), it will suggest working around this with Puma configuration like (1) disabling connection keepalive in Puma or (2) disabling a Puma setting called <code>max_fast_inline</code>, though I‚Äôm pretty sure this has the same effect in Puma as disabling connection keepalives too (last I checked there wasn‚Äôt consensus in Puma as to what parts of the related behavior were intended but surprising, and what was unintended bugs in the logic).</p>

<p>Anyways, there‚Äôs a 3rd option: <strong>use Thruster</strong>.</p>

<ul>
  <li>Requests on the Heroku network between the Heroku router and Thruster running in your application dyno can use connection keepalives (sidenote: I‚Äôm 98% confident Thruster supports keepalives because <a href="https://github.com/basecamp/thruster/blob/10e33f6f5a2476231c00a59be209f7a58e98dc1a/internal/server.go#L9">Go <code>net/http</code></a> enables keepalives by default and Thruster doesn‚Äôt appear to explicitly disable them)</li>
  <li>Requests <em>locally</em> within your application dyno between Thruster and Puma can disable connection keepalive and there shouldn‚Äôt be any network latency for the TCP handshake because it‚Äôs all happening locally in the dyno.</li>
</ul>

<p>No one else seems to be blogging about this‚Äîa fact pointed out when I suggested this in the Rails Performance Slack. So here ya go.</p>

<ol>
  <li>Add the <code>thruster</code> <a href="https://github.com/basecamp/thruster">gem</a></li>
  <li>Update your Procfile: <code>web: HTTP_PORT=$PORT TARGET_PORT=3001 bundle exec thrust bin/rails server</code></li>
  <li>Disable Puma‚Äôs keepalives: <code>enable_keep_alives false</code></li>
</ol>

<p>I was already using Thruster with Puma on Heroku because of the benefits of x-sendfile support. If you‚Äôre worried about resource usage (because Thruster is yet another process) it‚Äôs been pretty minimal. I looked just now on one app and 13MB for Thruster next to 200MB for the Rails app running in Puma; seems tiny to me.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku ps:exec <span class="nt">-a</span> APPNAME
<span class="c"># ....</span>
<span class="nv">$ </span>ps <span class="nt">-eo</span> rss,pss,cmd
  RSS   PSS CMD
    4     0 ps-run
11324 12792 /app/vendor/bundle/ruby/3.4.0/gems/thruster-0.1.14-x86_64-linux/exe/
 2960  1095 sshd: /usr/sbin/sshd <span class="nt">-f</span> /app/.ssh/sshd_config <span class="nt">-o</span> Port 1092 <span class="o">[</span>listener
 2220   407 /bin/bash <span class="nt">-l</span> <span class="nt">-c</span> <span class="nv">HTTP_PORT</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nv">TARGET_PORT</span><span class="o">=</span>3001 bundle <span class="nb">exec </span>thrust
199336 187215 puma 6.6.0 <span class="o">(</span>tcp://0.0.0.0:3001<span class="o">)</span> <span class="o">[</span>app]
 8316  1821 ssh <span class="nt">-o</span> <span class="nv">ServerAliveInterval</span><span class="o">=</span>30 <span class="nt">-o</span> <span class="nv">ServerAliveCountMax</span><span class="o">=</span>3 <span class="nt">-o</span> HostKeyAlg
 9172  6346 skylightd
 8244  1367 sshd: u16321 <span class="o">[</span>priv]
 5548  1296 sshd: u16321@pts/0
 4444  1178 <span class="nt">-bash</span>
 4036  1964 ps <span class="nt">-eo</span> rss,pss,cmd
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</link>
        <guid isPermaLink="true">https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</guid>
        <pubDate>Fri, 25 Jul 2025 18:18:00 +0000</pubDate>
      </item>
      <item>
        <title>How to customize Rails I18n key suffixes like¬†`_md`¬†for Markdown</title>
        <description>
          <![CDATA[
          <p>If you‚Äôve had reason to use internationalization in Rails on Rails, you‚Äôve probably used a <a href="https://guides.rubyonrails.org/i18n.html#using-safe-html-translations">nifty feature</a> of it:</p>

<blockquote>
  <p>Keys with a <code>_html</code> suffix‚Ä¶ are marked as HTML safe. When you use them in views the HTML will not be escaped.</p>
</blockquote>

<p>Authoring HTML within translations can be a pain because HTML is quite verbose and easy to mess up when maintaining multiple versions of the same phrase, or paragraph, or page across multiple languages.</p>

<p>It would be nice üíÖ to have something like this:</p>

<blockquote>
  <p>Keys with a <code>_md</code> suffix can be authored in Markdown and will be automatically converted to HTML and marked as HTML safe.</p>
</blockquote>

<p>Markdown is a lot less verbose than HTML and easier to write and eyeball. Let‚Äôs do it!</p>

<p>First, we have to patch into the I18n <code>translate</code> method. It looks something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; -(2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Fun Fact:</strong> Rails does a clever thing to detect missing translations. I18n accepts a stack of fallback defaults, and Rails <a href="https://github.com/rails/rails/pull/45572">appends a magic number</a> to the back of that stack: <code>-(2**60) =&gt; -1152921504606846976</code>. If a translation ever returns that value, Rails assumes that the translation fell through the entire fallback stack and is therefore missing. (It took me a bit of sleuthing to figure out what the heck this weird number meant while poking around.)</p>

<p>Second, we patch the Rails HTML Safe behavior to <em>also</em> make these strings HTML safe too:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
</code></pre></div></div>

<p>That‚Äôs pretty much it!</p>

<p>If you‚Äôre uncomfortable patching things, Tim Masliuchenko has a gem called  <a href="https://github.com/timfjord/i18n-transformers"><code>I18n::Transformers</code></a> that makes it easy create custom key-based transformations. I believe you‚Äôll still need to patch into the HTML safety behavior of Rails though‚Äîand anything involving marking things as HTML-safe should be always be scrutinized for <a href="https://guides.rubyonrails.org/security.html#cross-site-scripting-xss">XSS</a> potential.</p>

<p>Here‚Äôs the full initializer I have, including how I get Kramdown to create ‚Äúinline‚Äù markdown:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"Can't provide both text and block"</span> <span class="k">if</span> <span class="n">text</span> <span class="o">&amp;&amp;</span> <span class="nb">block_given?</span>

    <span class="n">text</span> <span class="o">=</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="k">return</span> <span class="s2">""</span> <span class="k">unless</span> <span class="n">text</span>

    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">strip_heredoc</span>
    <span class="n">options</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">reverse_merge</span><span class="p">(</span>
      <span class="ss">auto_ids: </span><span class="kp">false</span><span class="p">,</span>
      <span class="ss">smart_quotes: </span><span class="p">[</span><span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">]</span> <span class="c1"># disable smart quotes</span>
    <span class="p">)</span>
    <span class="no">Kramdown</span><span class="o">::</span><span class="no">Document</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">options</span><span class="p">).</span><span class="nf">to_html</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="p">)</span>
    <span class="c1"># Custom input parser defined in Kramdown::Parser::Inline</span>
    <span class="n">convert</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="ss">input: </span><span class="s2">"Inline"</span><span class="p">,</span> <span class="o">**</span><span class="p">).</span><span class="nf">strip</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; (2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>

<span class="c1"># Generate HTML from Markdown without any block-level elements (p, etc.)</span>
<span class="c1"># http://stackoverflow.com/a/30468100/241735</span>
<span class="k">module</span> <span class="nn">Kramdown</span>
  <span class="k">module</span> <span class="nn">Parser</span>
    <span class="k">class</span> <span class="nc">Inline</span> <span class="o">&lt;</span> <span class="no">Kramdown</span><span class="o">::</span><span class="no">Parser</span><span class="o">::</span><span class="no">Kramdown</span>
      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
        <span class="k">super</span>
        <span class="vi">@block_parsers</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</link>
        <guid isPermaLink="true">https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</guid>
        <pubDate>Wed, 16 Jul 2025 10:00:00 +0000</pubDate>
      </item>
      <item>
        <title>Is everyone ok at the gemba</title>
        <description>
          <![CDATA[
          <p>The following is the bones of a half-written essay I‚Äôve had kicking around in my drafts for the past 3 years, occassionally updated. I recently read <em>two</em> things that said it all better anyways, but if you read through you get my perspectives as someone in software cooking the goose.</p>

<p>One:  Albert Burneko‚Äôs <a href="https://defector.com/toward-a-theory-of-kevin-roose">‚ÄúToward a theory of Kevin Roose‚Äù</a>:</p>

<blockquote>
  <p>My suspicion, my awful awful newfound theory, is that there are people with a sincere and even kind of innocent belief that we are all just picking winners, in everything: that ideology, advocacy, analysis, criticism, affinity, even taste and style and association are essentially predictions. That what a person tries to do, the essential task of a person, is to identify who and what is going to come out on top, and align with it. The rest‚Äîwhat you say, what you do‚Äîis just enacting your pick and working in service to it.</p>

  <p>‚Ä¶. To these people this kind of thing is not cynicism, both because they believe it‚Äôs just what everybody is doing and because they do not regard it as ugly or underhanded or whatever. Making the right pick is simply being smart. And not necessarily in some kind of edgy-cool or subversive way, but smart the very same shit-eating way that the dorkus malorkus who gets onto a friendly first-name basis with the middle-school assistant principal is smart. They just want to be smart.</p>

  <p>So these people look at, say, socialists, and they see fools‚Äînot because of moral or ethical objections to socialism or whatever, or because of any authentically held objections or analysis at all, but simply because they can see that, at present, socialism is not winning. All the most powerful guys are against it. Can‚Äôt those fools see it? They have picked a loser. They should pick the winner instead.</p>
</blockquote>

<p>Two: Ed Zitrain‚Äôs <a href="https://www.wheresyoured.at/make-fun-of-them/">‚ÄúMake fun of them‚Äù</a> (emphasis in the original):</p>

<blockquote>
  <p>In my opinion, there‚Äôs nothing more cynical than watching billions of people get shipped increasingly-shitty and expensive solutions and then¬†<strong>get defensive of the people shipping them,</strong>¬†and hostile to the people who are complaining that the products they use suck<strong>.</strong>¬†</p>
</blockquote>

<h3 id="in-the-day-to-day">In the day to day</h3>

<p>One of the standard questions in my manager/executive interview kit is:</p>

<p><em>Walk me through what a good day looks like for you if this were your ideal job? And based on past experience, walk me through a bad day?</em> (yes, this is described in the Phoenix Project)</p>

<p>With some prodding, I want sus out how they think about a mix of group meetings, 1:1s, and heads down time. And ideally that the candidate can articulate some concrete artifacts of work (canned meetings, documents, etc.).</p>

<ul>
  <li>An excerpt of a good answer: Promoting someone up a level is really satisfying. Being in a calibration meeting where I‚Äôm presenting the packet my report and I developed together. I‚Äôve designed promotion processes before and building an agenda for that meeting is a lot of fun. Do you have a career ladder here? I spend a lot of time doing gap analyses. I‚Äôll spend at least a few hours every week running through my notes.</li>
  <li>An excerpt of a bad answer: Promoting someone up a level is really satisfying. It‚Äôs important people are recognized for their work.</li>
</ul>

<p>Good answers usually have jumping off points to talk about working and communication styles: ‚Äúoh, is that something you‚Äôre doing over chat or email or in a shared document? Is that a repeating thing or as needed? How would you pull that together?‚Äù Bad answers usually stay at the general level (async, mastery, autonomy, meaning, etc.) and just‚Ä¶ stop.</p>

<p>Having done maybe 30 of these interviews over the past decade, I‚Äôve realized there are many people who seem otherwise competent but can‚Äôt talk, concretely, to what they do. Physically. Embodied. Even at a computer, what‚Äôs behind that digital window.</p>

<p>And I say ‚Äúseems competent‚Äù cause, well, I usually pull these questions out at the end of the interview pipeline, and the candidates are otherwise qualified and their previous interviewers liked them enough to advance them to this stage. And even when the company has gone on to hire them, over my objections sometimes based on this question, they haven‚Äôt been <em>the worst</em>. The candidate I interviewed with the most memorably bad answers is now an SVP of Engineering at a major tech company. They‚Äôre doing ok.</p>

<p>But I do think there‚Äôs something there, that‚Äôs indicative of the moment. To break it down, there‚Äôs two awarenesses that I‚Äôm checking for:</p>

<ul>
  <li>Materiality: an awareness of where they <em>are</em> doing the work, and that‚Äôs also sorta doublechecking that they are aware that other people actually exist too. You read enough Ask a Manager and you realize <em>a lot</em> of powerful people struggle with object permanence when someone is outside their sight lines.</li>
  <li>Operationalization: a set of personal playbooks for making things happen. For example, I‚Äôm a big fan of skip 1:1s (when you meet with your report‚Äôs reports, or your manager‚Äôs manager) and will make point of intentionally setting those up. I have lots of opinions about what a minimally-viable-career-progression system looks like: career ladders and performance evaluation processes and calibration meeting agendas and 1:1 templates. Or more discipline specific, like inventories and gapping templates and decision docs,  In any job we don‚Äôt have to use <em>mine</em> but I sorta expect an experienced manager to have them in their back pocket and be interested in talking about them.</li>
</ul>

<p>All of which is to ask: <strong>take me to your gemba</strong>, ideally, and help me understand how it differs from your worst one too. <em><a href="https://en.wikipedia.org/wiki/Gemba">The Gemba</a></em> being the location where the work happens. Pedantically, it‚Äôs where the value is actually created, like the factory floor, but in this knowledge-heavy work‚Ä¶ who can say? Our most valuable assets go home every night, right?</p>

<h3 id="the-ai-in-the-room">The AI in the Room</h3>

<p>All of this comes to mind with the contemporary exhortions of like ‚ÄúAI is mandatory‚Äù and ‚Äúyou must use AI in your job‚Äù sorts of manifestos and the reply-guys of like ‚Äúyou either git gud with AI or you fall behind and end up living in a cave and eating bats.‚Äù</p>

<p>So I take the previous thought of like ‚Äúlots of managers and executives have no idea what their own work actually looks like‚Äù‚Ä¶.</p>

<p>‚Ä¶and my thoughts about my own discipline: how does software get made? <a href="https://arxiv.org/pdf/1802.06321">Nobody knows.</a> On the individual level, it‚Äôs extremely rare to find people doing anything like Extreme Programming and its emphasis on pair programming and rigid collective team practices. In most of my decades of professional experience, software just expected to happen. <a href="https://arxiv.org/abs/2307.13143">Nobody knows.</a></p>

<p>For example, most teams I‚Äôve worked with have huge differences in how individuals approach a problem: what and how much design or plannng they do up front, whether they start with tests or implementation, the order of components they work through, what they consider ‚Äúdone‚Äù. Drill down to the actual hands-on-keyboard-and-eyes-on-screen and editors and IDEs and development tooling are all over the place developer to developer. And no practices for sharing or learning from each other, and rarely interest either (‚Äúit works for me and I expect it would be painful to change‚Äù).</p>

<p>I have to imagine there‚Äôs a relation here, more often than not I‚Äôm talking to software managers and executives. Shared practices just aren‚Äôt <em>a thing</em>.</p>

<p>So I‚Äôll simply say: it‚Äôs weird that AI is <em>the thing</em> to mandate, rather than like a consistent IDE, or testing strategy, or debugger workflow. That <em>this</em> is the thing, when there is so much everything-else that nobody knows.</p>

<h3 id="accountability-kayfabe">Accountability kayfabe</h3>

<p>I‚Äôll admit it‚Äôs easy to take potshots at the weird things tech executive say and do, but I see a pattern here. Just prior to these AI mandates were the layoffs, which had their signature phrase and power pose: ‚ÄúI‚Äôm accountable for this decision.‚Äù</p>

<p>‚ÄúAccountability‚Äù is a funny word as it means to ‚Äúgive an account.‚Äù Y‚Äôknow, explain what happened, what was done, when, and by whom. What‚Äôs funny is that the word has been sort of walked back from actually giving that explaination, to the idea of the burden of having to give that explanation, to just a vibe of like ‚ÄúI‚Äôve got it. This one‚Äôs on me.‚Äù</p>

<p>I noticed that a lot. I‚Äôm <a href="https://aworkinglibrary.com/writing/on-accountability">not the only one</a>.</p>

<p>I think the thing that people wanted to know, employees especially, was just like: materially and operationally, what the hell happened here?! And when there‚Äôs not an answer, there is a reasonable spectrum between active gaslighting on one side and my recognition that the people in charge could actually have no idea and maybe not even the personal capacity to know. It just ended up that way. Things happened.</p>

<h3 id="bringing-it-back-around">Bringing it back around</h3>

<p>I dunno. Just continue asking the ‚Äúcan you show me that?‚Äù ‚Äúcan we look at it together?‚Äù ‚Äúhow do you think that will effect things?‚Äù ‚Äúis there anything you have in mind that I can do to help?‚Äù questions.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/07/is-everyone-ok-at-the-gemba</link>
        <guid isPermaLink="true">https://island94.org/2025/07/is-everyone-ok-at-the-gemba</guid>
        <pubDate>Sat, 05 Jul 2025 17:35:00 +0000</pubDate>
      </item>
      <item>
        <title>Recently, June 29, 2025</title>
        <description>
          <![CDATA[
          <ul>
  <li>We have a new fridge; it is the same model as the old fridge because only that model would fit in the cabinetry. The installers also discovered that the water valve was broken and couldn‚Äôt be shut off; subsequently, the plumber determined that only the handle had snapped. I ordered a completely new water valve to unscrew its handle and attach that handle to the existing valve. In this economy.</li>
  <li>This week in Rails, I went back and replaced most of the places I was using turbo-broadcast-refresh and replaced them with targeted turbo-streams. I also spent a bunch of time trying to make an autogrowing textfield that didn‚Äôt bounce the page up and down which the <code>style.height = auto; style.height = scrollHeight</code>-strategy does with Bootstrap; this was <a href="https://gist.github.com/bensheldon/c68fbc7e7962bde5860ab4b5700585bb">the result</a>.</li>
  <li>I‚Äôm committed to RubyMine Junie over Cursor for AI-assisted coding. I think Cursor does ever-so-slightly better with generated code and the prompting UI, but RubyMine is so far beyond for everything else. I keep sharing this on Reddit, so here‚Äôs <a href="https://gist.github.com/bensheldon/b4fd84f9880b05ae57521beb1297e3a2">my agent guidelines</a> that I symlink into wherever the tool wants it.</li>
  <li>I‚Äôm still reading <em>The Future of Another Timeline</em>. And I started playing Satisfactory.</li>
</ul>

          ]]>
        </description>
        <link>https://island94.org/2025/06/recently-june-29-2025</link>
        <guid isPermaLink="true">https://island94.org/2025/06/recently-june-29-2025</guid>
        <pubDate>Sun, 29 Jun 2025 23:21:00 +0000</pubDate>
      </item>
      <item>
        <title>The difference between Rails Plugins, Extensions, Gems, Railties, and Engines</title>
        <description>
          <![CDATA[
          <p>There‚Äôs overlapping terminology that describes the act of packaging up some new behavior for Rails. I think of two gems I maintain that are of vastly different scales</p>

<ul>
  <li><a href="https://github.com/bensheldon/activerecord-has_some_of_many">Ôøº<code>activerecord-has_some_of_many</code>Ôøº</a> which adds two new tiny association methods to Active Record models in 150 lines of code.</li>
  <li><a href="https://github.com/bensheldon/good_job">GoodJob</a>, which is an entire Active Job backend with a mountable Web Dashboard and database models and custom job extensions in 10k lines of code.</li>
</ul>

<p>I was pondering the different terminology because I recently saw both ends of the spectrum discussed in the community:</p>

<ul>
  <li>A developer on Reddit announced a tiny new gem and a commenter wrote <em>well actually, in your Readme you called it an Engine but you shouldn‚Äôt do that.</em></li>
  <li>I got pinged on <a href="https://github.com/rails/rails/issues/52311">a Rails issue</a> that left me with the belief that some behavior, if <em>not</em> packaged as an Engine, could be expected to break.</li>
</ul>

<p>I think there are only two dimensions to consider when picking the correct terminology:</p>

<ul>
  <li>How the behavior is packaged</li>
  <li>Whether it‚Äôs necessary to package the behavior that way. Which isn‚Äôt even a criticism in my opinion, just an observation.</li>
</ul>

<p>Here‚Äôs my opinionated list, in order of somewhat increasing complexity:</p>

<ul>
  <li><strong>Rails Extension</strong>: A small monkeypatch or tiny new behavior to existing Rails behaviors (Active Record, Active Job, etc.). Especially if it‚Äôs not even a gem: simply a file you wrote a blog post about that gets copied into <code>config/extensions</code> and then <code>require_relative</code>‚Äôd in <code>config/application.rb</code>.</li>
  <li><strong>Rails Gem</strong> : Reductively, a gem is a load path for some code, and some ownership metadata, and maybe it‚Äôs been published to Rubygems.org. Nothing special.</li>
  <li>‚≠êÔ∏è <strong>Rails Plugin</strong>. A generic name covers all situations imo, regardless of size, scope, or complexity.</li>
  <li><strong>Railtie</strong>: When you write a gem that plugs into the Rails framework, you create <a href="https://api.rubyonrails.org/classes/Rails/Railtie.html">special file</a> named <code>lib/railtie.rb</code> that has a class that inherits from `<a href="https://api.rubyonrails.org/classes/Rails/Railtie.html">Rails::Railtie</a>¬†that contains a DSL to configure how your gem‚Äôs behavior interfaces with Rails (configuration, initialization, etc.). I think Railtie is a bit of an odd-duck terminology-wise, but it makes sense considering‚Ä¶</li>
  <li><strong>Rails Engine</strong>: An ‚ÄúEngine‚Äù is <em>nearly</em> identical to a Railtie, but the file is named <code>lib/engine.rb</code> and it has a class that inherits from <code>Rails::Engine</code>. But <code>Rails::Engine</code> itself inherits from <code>Rails::Railtie</code>, so this is a matter of degrees. Your gem absolutely <em>needs</em> to use the Engine behavior if it wants to create mountable routes (though I guess you can mount a vanilla Rack app) or inherit from Rails Base classes like <code>ActiveRecord::Base</code>, <code>ActionController::Base</code>, <code>ActiveJob::Base</code>, etc. which live in the Engine‚Äôs own <code>app/</code> directory.</li>
</ul>

<p>(I‚Äôll clock that the <a href="https://guides.rubyonrails.org/">The Rails Guides</a>, under the ‚ÄúExtending Rails‚Äù section, has separate guides for Plugins and Engines; the former somewhat surprisngly does not mention the latter.)</p>

<p>So if I go back to the two reasons why I wrote this, and try to be strict with this terminology:</p>

<ul>
  <li>If your Plugin <em>has</em> an <code>engine.rb</code> file, it <em>is</em> an Engine. Simple as that. If you don‚Äôt need the Engine-specific behavior, you could package it as a Railtie, but I think the difference is negligible.</li>
  <li>If you don‚Äôt have <em>any</em> dependencies on Rails (outside of maybe ActiveSupport) and don‚Äôt need to hook into the parent application‚Äôs configuration or initialization or framework, then you don‚Äôt need a Railtie or Engine at all. Just say it‚Äôs a gem that‚Äôs compatible with Rails and explain how to use it in that environment.</li>
  <li>Really, do what you want and tell people about it.</li>
</ul>

          ]]>
        </description>
        <link>https://island94.org/2025/06/difference-rails-plugin-extensions-gems-railties-engines</link>
        <guid isPermaLink="true">https://island94.org/2025/06/difference-rails-plugin-extensions-gems-railties-engines</guid>
        <pubDate>Tue, 17 Jun 2025 15:48:00 +0000</pubDate>
      </item>
      <item>
        <title>Recently, June 8, 2025</title>
        <description>
          <![CDATA[
          <p>Big business news for my startup: <a href="https://www.prnewswire.com/news-releases/frontdoor-benefits-receives-2-1-million-investment-to-improve-access-to-snap-and-public-assistance-programs-302472695.html">‚ÄúFrontdoor Benefits Receives $2.1 Million Investment to Improve Access to SNAP and Public Assistance Programs‚Äù</a>. My cofounder Charlotte also <a href="https://frontdoorbenefits.substack.com/p/the-connecticut-project-invests-21m">added some details on our blog</a> too. Big milestone, and onto the next milestone and so forth.</p>

<hr />

<p>We went to a Golden State Valkyries basketball game last week. It was a lot of fun, and a <em>nice</em> seat was the cost of a substantially-less-nice seat to see the Golden State Warriors. We bought sweatshirts, so that means we‚Äôre going back.</p>

<p>On sports, since my last <em>Recently</em> we also went to two Giants games and a Warriors game (whomp whomp).</p>

<hr />

<p>Of random technical trivia, I discovered a cause of flaky tests: Turbo-Rails debounces broadcast refreshes and it‚Äôs possible for them to slip out of test transactions and cause chaos. I have <a href="https://github.com/hotwired/turbo-rails/issues/731">reported it</a>.</p>

<p>Also, my prior-colleague Issy wrote a nice thing <a href="https://ruby.social/@issyl0/114489859415578145">and mentioned me</a>.</p>

<hr />

<p>I finished reading Martha Well‚Äôs reissued <em>The Emilie Adventures</em>, which for all her books held my attention the least. I also read Brittany Newell‚Äôs <em>Soft Core</em> which was very good. I‚Äôm now reading <em>The Future of Another Timeline</em>.</p>

<p>For nonfiction, I (re-) read the updated edition of <em>The Strategy is Delivery</em>. And now I‚Äôm greatly enjoying Rouse‚Äôs <em>Game Design: Theory and Practice (2nd Edition)</em> which I found because it was referenced in the <a href="https://www.filfre.net/2025/05/the-end-of-sierra-as-we-knew-it-part-4-chainsaw-monday/">Digital Antiquarian‚Äôs history of the Sierra studio</a>.</p>

<hr />

<p>I beat the game <a href="https://en.wikipedia.org/wiki/Yoku%27s_Island_Express">Yoku‚Äôs Island Express</a>, which was a delightful experience on my desired theme of nice metroidvania (recommendations please). I also just started <a href="https://play.date/games/seasons/two/">Season 2 of Playdate</a>, which was a reason to find and charge it. On the theme of small handhelds, I ordered an <a href="https://www.adafruit.com/product/6323">Adafruit USB C Resistor Fixer</a> (say that 5 times fast) for the RGB30 that was collecting dust until I discovered some Pico 8 games I‚Äôd like to play.</p>


          ]]>
        </description>
        <link>https://island94.org/2025/06/recently-june-8-2025</link>
        <guid isPermaLink="true">https://island94.org/2025/06/recently-june-8-2025</guid>
        <pubDate>Mon, 09 Jun 2025 00:58:00 +0000</pubDate>
      </item>
      <item>
        <title>A nice email for subscribers</title>
        <description>
          <![CDATA[
          <p>I got this nice email from Defector, an online publication I pay for (along with <a href="https://deprogrammaticaipsum.com/issues">De Programmatica Ipsum</a>, <a href="https://www.garbageday.email/">Garbage Day</a>, and <a href="https://www.todayintabs.com/">Today in Tabs</a>. I think that‚Äôs it, though I guess I can include <a href="https://rubyland.news/">Rubyland.news</a> and <a href="https://newsletter.shortruby.com/">Short Ruby Newsletter</a> too). I yearn to share something like this for everyone who actively, if not always monetarily, supports my own work. The feeling is there, though not words this nice.</p>

<blockquote>

  <p>Subject: Thank you for supporting Defector</p>

  <p>I like when people ask me how Defector is doing. Thanks to subscribers like you, I get to say that not only that Defector is doing well, but that I love my work.</p>

  <p>I spent most of my life as a writer in jobs that were always and obviously impermanent. Roughly every 20 months, the people running things‚Äîpeople I never saw, and who had no interest in the work we did‚Äîwould get bored, or nervous, or fall for some dippy executive fad, and¬†<a href="https://defector.com/three-newsrooms-imploded-around-me-in-under-a-year">pivot some number of us out of our jobs</a>. Basically every innovation in media over the last few decades has been some version of this: an attempt by executive types to see how much less they can do, and how long they can get away with making everything <a href="https://defector.com/henry-blodget-invents-hires-sexually-harasses-blogs-about-nonexistent-ai-subordinate">smaller</a>,¬†<a href="https://defector.com/the-familiarity-and-sadness-of-watching-the-washington-post-go-to-hell">sadder</a>, and¬†<a href="https://defector.com/horny-sports-blogging-makes-a-bewildering-return-to-sports-illustrated">worse</a>.</p>

  <p>The most fundamental benefit of owning your workplace, as we do at Defector, is that we just don‚Äôt have to worry about that. Instead, we‚Äôre trying to solve the opposite problem: how to make the site¬†<a href="https://defector.com/saquon-barkley-lured-me-to-an-arena-where-i-learned-passive-income-is-holy">better</a>¬†and¬†<a href="https://defector.com/what-did-she-see-at-the-end">broader</a>¬†and¬†<a href="https://defector.com/confessions-of-a-spelling-bee-pronouncer">more surprising</a>¬†and¬†<a href="https://defector.com/dave-mckenna-insists-they-have-ham-trucks-in-france">more fun</a>, tinkering towards the right balance of¬†<a href="https://defector.com/for-sale-the-end-and-the-means-to-wait-for-it">smart</a>¬†and¬†<a href="https://defector.com/is-jon-heyman-paying-too-much-for-blueberries">stupid</a>. If you replace mystified Executive Maneuvers with the less abstract challenge of ‚Äúwriting good blogs for people who like to read,‚Äù this turns out to be both a good job and a viable business.</p>

  <p>But even after filtering out the noise from upstairs, there are plenty of other things to worry about. Chief among them is making sure that those good blogs reliably get in front of both existing subscribers like you and new ones we‚Äôd like to bring into the fold. All of those bad, previous jobs happened on an internet that worked better than our current one. Then as now, the people in charge were craven and nasty and dumb, but it was easier to find things, and there were notably more non-toxic places in which to talk about it all.</p>

  <p>So: thanks again for reading our blogs, and thanks especially for sharing them with people you think should know about Defector. (Here I‚Äôll remind you that subscribers get an unlimited number of gift links each month to facilitate sharing.) Thanks also for making this the best job I‚Äôve ever had. I‚Äôm very lucky to be able to keep doing this, with my friends and for such an engaged community of readers. None of it would exist without you.</p>

  <p>Be well,
David</p>

</blockquote>

          ]]>
        </description>
        <link>https://island94.org/2025/06/a-nice-email-for-subscribers</link>
        <guid isPermaLink="true">https://island94.org/2025/06/a-nice-email-for-subscribers</guid>
        <pubDate>Wed, 04 Jun 2025 20:13:00 +0000</pubDate>
      </item>
      <item>
        <title>Recently, May 4, 2025</title>
        <description>
          <![CDATA[
          <p>Frontdoor Benefits, my new startup, posted <a href="https://frontdoorbenefits.substack.com/p/frontdoor-benefits-a-first-newsletter">our first newsletter/update</a>. In doing our ‚Äúplanning‚Äù for it I took a lot from how I apprach this blog:</p>

<blockquote>
  <ul>
    <li>We are writing to a single individual (‚ÄùDear treasured friend‚Äù not ‚ÄúHey friends‚Äù).</li>
    <li>We are writing from each of our personal voices (‚ÄùThis is Charlotte. I have‚Ä¶ ‚Äù or ‚ÄúThis is Ben. I have‚Ä¶‚Äù)</li>
    <li>Tone is casual and informal, we are sharing the things we‚Äôve done or are thinking about with a close and curious person.</li>
    <li>We write about what we have done or thought about. Not so much what we intend to do in the future (definitely no commitments!)</li>
    <li>We try to avoid talking about the newsletter itself. For example, we don‚Äôt say how frequently we want to publish, or apologizing for it being a minute. Every post of the newsletter just <em>is</em>.</li>
  </ul>
</blockquote>

<p>It‚Äôs been successful so far, in that we asked for some things in it and people have delivered.</p>

<hr />

<p>I have been doing lots of research and having interesting conversations about customer/client/caseworker/constituent relationship management. Not so much ‚Äúsalesforce‚Äù  or ‚Äúhubspot‚Äù but how to break down identities and artifacts and tasks; differentiating between task-based from case-based models, and worker activity from supervisory concerns. <em>If you have experience, or opinions, or related traumas, I‚Äôd love to chat: ben@openfrontdoor.com.</em></p>

<hr />

<p>I <a href="https://github.com/hotwired/turbo-rails/issues/731">discovered</a> that <code>turbo-rails</code> debounces Refresh Broadcasts; after being surprised for many, many minutes why a Rails runner script wasn‚Äôt broadcasting as expected. One of those things that simply manifests as strangely broken if you don‚Äôt go and read the code.</p>

<hr />

<p>My new workday is settling down into routine, and now I‚Äôm trying to add a regular morning swim 3 days a week. I managed one. Progress!</p>

<hr />

<p>I finished reading <em>Space Between Worlds</em> and its sequel <em>Those Beyond the Wall</em>. And started Kirstin Chen‚Äôs <em>Counterfeit</em> , which so far has me wondering whether phrases such as ‚Äúnipple-length hair‚Äù is attributable to the character or the author (it was no mystery at all <a href="https://island94.org/2025/04/recently-april-7-2025">the last time</a> this came up).</p>

<p>Katamari Damacy is on Apple Arcade, and I‚Äôve been playing that. I also picked up The Long Dark again which I haven‚Äôt played since early access before they added a story mode; as a walking simulator it‚Äôs a little slow and bleak and I‚Äôm not a big fan of graphically dying‚Ä¶ but it is a walking simulator and I like that.</p>

<p>Last night we saw Empire of the Sun at the Greek theatre.</p>

<p>I renewed my CPR training and certification. That‚Äôs content.</p>

<hr />

<p>We‚Äôre fostering <a href="https://www.instagram.com/redcarpetcats/p/DJPuSbtTGYi/?img_index=1">Dennis, a sweet tabby cat who needs a forever home</a>.</p>

<hr />

<p>Fuck, <a href="https://www.reddit.com/r/AmeriCorps/comments/1k8oh2r/hello_all_starting_a_thread_to_express_fears_and/">AmeriCorps is gone</a>.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/05/recently-may-4-2025</link>
        <guid isPermaLink="true">https://island94.org/2025/05/recently-may-4-2025</guid>
        <pubDate>Sun, 04 May 2025 22:13:00 +0000</pubDate>
      </item>
      <item>
        <title>Recently, April 20, 2025</title>
        <description>
          <![CDATA[
          <p>Angelina caught a cold, so the past week has been largely laying low and sleeping 9+ hours a night trying not to catch it myself. Not the worst life.</p>

<hr />

<p>Elevating this to top fish recipe: <a href="https://www.seaforager.com/recipes/rockfish-garlic-shallots-tomatoes-amp-and-a-lotta-herbs">Rockfish, Garlic, Shallots, Tomatoes &amp; and a lotta Herbs</a>.</p>

<hr />

<p>Using ChatGPT‚Äôs Web Search is ok. ‚ÄúFind me articles, marketing posts, and conference talks about [something]‚Äù. I have to follow up several times slightly differently (‚Äúanything else? What about lightning talks?‚Äù) and copy resulting links into a separate doc to organize to have something approaching comprehensive‚Ä¶.  But pretty good and better than what I can get out of either Kagi or Google. I ignore the summaries and chatty nonsense and just copy the links and read them myself. Sorry climate and future generations.</p>

<hr />

<p>I cut ~30 seconds from my GitHub Actions build times by replacing my <code>apt-get install</code> step with an action that caches using <a href="https://github.com/awalsh128/cache-apt-pkgs-action">awalsh128/cache-apg-pkgs-action</a>; there‚Äôs a couple options but this one had the most stars in the marketplace:</p>

<pre><code># Before
- name: "Install packages"  
  run: |
  sudo apt-get -yqq update
  sudo apt-get -yqq install libvips-dev

# After
- name: "Install packages" 
  uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d
  with:
  packages: libvips-dev
  version: 1 # cache version, change to manually invalidate cache
</code></pre>

<hr />

<p>Turbo/hotwire stuff: I‚Äôve been gradually replacing more granular broadcasts of like prepend/update/remove with page refresh events for their simplicity. The challenge I have is that if there is a form + refreshable content on the same page (sometimes with the form in the middle or multiple forms). If the content refreshes, I don‚Äôt want to refresh the form. But I do want the form to refresh itself when submitted (show validation messages, reset, etc.). I can wrap the form in a data-turbo-permanent for the first part, but then the form doesn‚Äôt update when it‚Äôs submitted.</p>

<p>My workaround to that is a stimulus controller that wraps the form and removes the <code>data-turbo-permanent</code> when the form is submitted, inspired by <a href="https://www.reddit.com/r/rails/comments/1d8fu0v/clever_new_hotwire_hack/">this</a>. Is there a better way to do it?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">import</span> <span class="p">{</span> <span class="no">Controller</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"@hotwired/stimulus"</span>

<span class="sr">//</span> <span class="no">To</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">wrap</span> <span class="n">a</span> <span class="n">form</span> <span class="n">to</span> <span class="n">allow</span> <span class="n">the</span> <span class="n">form</span> <span class="n">to</span> <span class="n">be</span> <span class="n">permanent</span> <span class="n">during</span>
<span class="sr">//</span> <span class="no">Turbo</span> <span class="no">Stream</span> <span class="n">refresh</span> <span class="n">events</span> <span class="n">but</span> <span class="n">to</span> <span class="n">update</span> <span class="n">normally</span> <span class="k">when</span> <span class="n">submitting</span> <span class="n">the</span> <span class="n">form</span><span class="p">.</span>
<span class="nf">/</span><span class="o">/</span> <span class="no">Example</span><span class="p">:</span>
<span class="sr">//</span>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">data</span><span class="o">-</span><span class="n">turbo</span><span class="o">-</span><span class="n">permanent</span> <span class="nb">id</span><span class="o">=</span><span class="s2">"&lt;%= dom_id(@phone, :message_form) %&gt;"</span> <span class="n">data</span><span class="o">-</span><span class="n">controller</span><span class="o">=</span><span class="s2">"permanent-form"</span><span class="o">&gt;</span>
<span class="sr">//</span>    <span class="o">&lt;</span><span class="sx">%= form_with ...
//  &lt;/div&gt;

export default class extends Controller {
  connect() {
    this.submitHandler =</span> <span class="n">this</span><span class="p">.</span><span class="nf">submitForm</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="s2">"submit"</span><span class="p">,</span> <span class="n">this</span><span class="p">.</span><span class="nf">submitHandler</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">disconnect</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">element</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="s2">"submit"</span><span class="p">,</span> <span class="n">this</span><span class="p">.</span><span class="nf">submitHandler</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">submitForm</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">target</span><span class="p">.</span><span class="nf">matches</span><span class="p">(</span><span class="s2">"form"</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">this</span><span class="p">.</span><span class="nf">element</span><span class="p">.</span><span class="nf">removeAttribute</span><span class="p">(</span><span class="s2">"data-turbo-permanent"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>I finished <em>Spinning Silver</em>. Now reading <em>The Space Between Worlds</em>.</p>

<p>I bought <a href="https://javascriptforrails.com/"><em>Javascript for Rails Developers</em></a>, largely because I like <a href="https://railsdesigner.com/articles/">the posts on Rails Designer</a>.</p>

<p>I started the demo for Unbeatable (‚Äúwhere music is illegal and you do crimes‚Äù); I like the art style, but <em>is it fun?</em> I dunno.</p>

<hr />

<p>I had to go to the shipping warehouse to pick up my new <a href="https://island94.org/2025/04/recently-april-7-2025">mechanical keyboard</a> because I kept missing the delivery person, but it otherwise arrived no problem.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/04/recently-april-20-2025</link>
        <guid isPermaLink="true">https://island94.org/2025/04/recently-april-20-2025</guid>
        <pubDate>Mon, 21 Apr 2025 00:19:00 +0000</pubDate>
      </item>
  </channel>
</rss>
