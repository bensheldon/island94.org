<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Island94.org</title>
    <description>A Lost and Found</description>
    <link>https://island94.org/</link>
    <atom:link href="https://island94.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Oct 2025 23:39:00 +0000</pubDate>
    <generator>Ruby on Rails</generator>
      <item>
        <title>Conflicted and commingled</title>
        <description>
          <![CDATA[
          <p>More than a decade ago, I was seated on the jury of a civil trial for “complex litigation”. I’ll try to keep this quick, but the case does come to mind more frequently than I would have imagined at the time.</p>

<p>In this trial, the plaintiff. a pharmaceutical company. was suing the defendant, a chemistry professor, for fraud. The chemistry professor, as part of his day job at a university, would create a bunch of novel molecules (put a carbon there, or an extra hydrogen here) that the university would test for various interesting bio-medical properties, and then license them to pharmaceutical companies for commercialization.</p>

<p>In this specific instance, the pharmaceutical company licensed a molecule from the university, and then turned around and invited the chemistry professor to join their scientific advisory board and gave the professor some company stock/equity. Fast forward several years and that molecule is now a very valuable drug. And the university <em>also</em> licensed a <em>different</em> molecule to a <em>different</em> company that the chemistry professor <em>also</em> had some equity in.</p>

<p>The alleged fraud was that the chemistry professor didn’t tell that first pharmaceutical company about the other molecule or the other pharmaceutical company… and should have? That was why it went to litigation.</p>

<p>The big picture wasn’t why it stuck in my mind so much as what we did during the <em>six week</em> jury trial: we read a lot of really, really old emails that the plaintiffs would paint as evidence of ill-intent and the defense would explain that nothing was very serious in the first place. I’m making the following exchange up, but thematically it was this over and over again:</p>

<blockquote>
  <p>Plaintiffs: You must not have been taking your duties very seriously when you replied: “I hope the wine is good winkie-face.”</p>

  <p>Defense: Can you read the whole exchange?</p>

  <p>Plaintiffs: This was in reply to the scientific advisory board chair writing “The meeting will be brief and then we’ll have dinner together at [nice restuarant]”</p>

  <p>Defense: Now this very serious advisory board that you allege our client was taking so unseriously several years ago that you are suing him for fraud today. Was there any written agenda or minutes or notes from those meetings?</p>

  <p>Plaintiffs: No.</p>
</blockquote>

<p>Lots and lots of that: some personal correspondence recontextualized in a trial against a background of potentially billions of pharmaceutical dollars at stake. Of what I learned:</p>

<ul>
  <li>Poe’s Law is everywhere: don’t be cute anywhere it might turn into discovery.</li>
  <li>Conflicts of Interest and commingling of personal and employer and contractual stuff can cause lots of problems. And also that creating conflicts of interest <em>is a strategy</em> for muddying the water.</li>
  <li>Complexity causes problems.</li>
</ul>

<p>On that last point, during the trial there was an entire plaintiff subplot of “but maybe actually it’s the same molecule.” The plaintiffs spent a whole day at least explaining benzene rings. Which was all of a theme to make the chemistry professor appear extra deceptive, like “it’s just one more carbon atom, how dumb do you think we are?!” And then at the end after several objections the judge was like “I’ve already ruled that they’re different molecules and the university owns them and can license them to whoever they want.” Any potential for confusion seemed to be taken advantage of in arguments to set a tone.</p>

<p>Anyways, I’ve been telling this story a lot to people in the context of Ruby Central / Rubygems drama. Usually with the explainer of “totally random, but did ever tell you about the really long jury trial I was part of? It was a lot.”</p>

          ]]>
        </description>
        <link>https://island94.org/2025/10/conflicted-and-commingled</link>
        <guid isPermaLink="true">https://island94.org/2025/10/conflicted-and-commingled</guid>
        <pubDate>Sun, 26 Oct 2025 23:39:00 +0000</pubDate>
      </item>
      <item>
        <title>Rails 103 Early Hints could be better, maybe doesn’t matter</title>
        <description>
          <![CDATA[
          <p>I recently went on a brief deep dive into 103 Early Hints because I looked at a <a href="https://github.com/shakacode/shakapacker/pull/722">Shakapacker PR</a> for adding 103 Early Hints support. Here’s what I learned.</p>

<p>Briefly, <a href="https://developer.chrome.com/docs/web-platform/early-hints">103 Early Hints</a> is a status code for an HTTP response that happens <em>before</em> a regular HTTP response with content like HTML. The frontrunning response hints to the browser what additional assets (javascript, css) the browser will have to load when it renders the subsequent HTTP response with all the content. The idea being that the browser <em>could</em>  load those resources while waiting for the full content response to be transmitted, and thus load and render the complete page with all its assets faster overall.</p>

<p>If you look at a response that includes 103 Early Hints, it looks like 2 responses:</p>

<pre><code class="language-text">HTTP/2 103
link: &lt;/application.css&gt;; as=style; rel=preload,&lt;/application.js&gt;; as=script; rel=modulepreload

HTTP/2 200
date: Fri, 17 Oct 2025 15:07:24 GMT
content-type: text/html; charset=utf-8
link: &lt;/application.css&gt;; as=style; rel=preload,&lt;/application.js&gt;; as=script; rel=modulepreload

&lt;html&gt; 
... the content
</code></pre>

<p>I keep writing “103 Early Hints” because Early Hints the status code response (103), also gets confused with the <code>Link</code> header of a content response that serves the same purpose (hinting what assets will need to be loaded), and near identical content: the 103 Early Hint header is usually same the <code>Link</code> value that the actual-content response header has. Because of this conceptual collision, it’s tough to google for and there are various confused StackOverflow responses.</p>

<p>Eileen Uchitelle built out <a href="https://eileencodes.com/posts/http2-early-hints/">the original implementation in Rails</a>. It’s good. It can be better. It also maybe doesn’t matter. I’ll tell you how and why.</p>

<h3 id="it-can-be-better">It can be better</h3>

<p>There’s two ways that the Rails implementation of 103 Early Hints can be better:</p>

<ol>
  <li>There should only be one 103 Early Hints response.</li>
  <li>The 103 Early Hints response should be emitted in a <code>before_action</code> instead of near the tail-end of the response.</li>
</ol>

<p><strong>There should only be one 103 Early Hint response.</strong> According to <a href="https://datatracker.ietf.org/doc/html/rfc8297">the RFC</a>, there can be multiple 103 responses, but according to the Browsers, they only look at the first 103 response.</p>

<blockquote>
  <p>A server might send multiple 103 responses, for example, following a redirect. <strong>Browsers only process the first early hints response</strong>, and this response must be discarded if the request results in a cross-origin redirect. — <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status/103">MDN</a></p>
</blockquote>

<blockquote>
  <p><strong>Chrome ignores the second and following Early Hints responses. Chrome only handles the first Early Hints response</strong> so that Chrome doesn’t apply inconsistent security policies (e.g. Content-Security-Policy). — <a href="https://source.chromium.org/chromium/chromium/src/+/main:docs/early-hints.md;l=18?q=early%20hints&amp;ss=chromium%2Fchromium%2Fsrc:docs%2F">Chromium Docs</a></p>
</blockquote>

<p>Rails emits a 103 Early Hint response each and every time your application calls <code>javascript_include_tag</code>, <code>stylesheet_link_tag</code>, or <code>preload_link_tag</code>.</p>

<p>Instead, it would be better if the application could accumulate multiple asset links and then flush them to a single 103 Early Hint response all together.</p>

<p>Aside: it’s really, really, cool how 103 Early Hint responses in Rack/Puma/Rails are emitted <em>in the middle of a handling a response</em>. The webserver puts a lambda/callable into the Rack Environment, and then the application calls that lambda with the contents of the 103 Early Hint response, and that causes the webserver to write the content to the socket. <a href="https://github.com/puma/puma/blob/a5206f1acdb953f87e690909d4434bb7e0b134af/lib/puma/request.rb#L78-L87">Here’s how it’s done in Puma</a>, in pseudocode:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># In the Puma webserver</span>
<span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">[</span><span class="s2">"rack.early_hints"</span><span class="p">]</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">early_hints_str</span><span class="o">|</span>
  <span class="n">fast_write_str</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">"HTTP/1.1 103 Early Hints</span><span class="se">\r\n</span><span class="si">#{</span><span class="n">early_hints_str</span><span class="si">}</span><span class="se">\r\n</span><span class="s2">"</span> 
<span class="k">end</span>

<span class="c1"># In the application</span>
<span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">[</span><span class="s2">"rack.early_hints"</span><span class="p">]</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="s2">"link: &lt;/application.css&gt;; as=style; rel=preload,&lt;/application.js&gt;; as=script; rel=modulepreload"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>The 103 Early Hint response should be emitted in a <code>before_action</code> instead of near the tail-end of the response.</strong> As mentioned, the 103 Early Hint response gets triggered when using <code>javascript_include_tag</code>, <code>stylesheet_link_tag</code>, or <code>preload_link_tag</code>.  Those usually are used in a Rails Layout <code>erb</code> file.</p>

<p>In Rails, Layouts get rendered last, after the view is rendered, which means that 103 Early Hints get emitted when the response is almost done being constructed: after the controller action, after the databae queries, after most of the HTML has been rendered to a string.</p>

<p>Instead, it would be better if the 103 Early Hint response was emitted in a <code>before_action</code> before any slow database queries or view rendering happens. The purpose of the 103 Early Hint is to be <em>early</em>. I’ve done this myself, manually constructing the links and flushing them through <code>request.send_early_hints</code>, it’s not difficult, but it would be nice if it was easier.</p>

<h3 id="it-maybe-doesnt-matter">It maybe doesn’t matter</h3>

<p>I can’t actually get 103 Early Hints to be returned all the way to me in any of my production environments. Likely because there is a network device, reverse proxy, load balancer, CDN, or something that’s blocking them.</p>

<ul>
  <li>👎 Heroku with Router 2.0 and custom domain</li>
  <li>👎 Heroku behind Cloudfront</li>
  <li>👎 Digital Ocean App Platform behind Cloudflare</li>
  <li>👎 AWS ECS+Fargate behind an ALB (this one actually breaks the website: <code>HTTP/2 stream 1 was not closed cleanly</code>)</li>
</ul>

<p>I can see them working locally, using Puma or Puma behind Thruster, but in production…. nada. Obviously this isn’t comprehensive list of production environments, but they’re the ones <em>I</em> am using.</p>

<p>If you want to see them locally:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># Run Puma with early hints. Or use `early_hints` DSL directive in puma.rb</span>
<span class="nv">$ </span>bin/rails s <span class="nt">--early-hints</span>

<span class="c"># Make a request, this works locally or against a production target</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> localhost:3000 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>

&lt; HTTP/1.1 103 Early Hints
&lt; <span class="nb">link</span>: &lt;/assets/application-316caf93b23ca4756d151eaa97d8122c7173f8bdfea91203603e56621193c19e.css&gt;<span class="p">;</span> <span class="nv">rel</span><span class="o">=</span>preload<span class="p">;</span> <span class="nv">as</span><span class="o">=</span>style<span class="p">;</span> nopush
&lt;
&lt; HTTP/1.1 103 Early Hints
&lt; <span class="nb">link</span>: &lt;/vite-dev/assets/application-WvRi4PrU.js&gt;<span class="p">;</span> <span class="nv">rel</span><span class="o">=</span>modulepreload<span class="p">;</span> <span class="nv">as</span><span class="o">=</span>script<span class="p">;</span> <span class="nv">crossorigin</span><span class="o">=</span>anonymous<span class="p">;</span> nopush
&lt;
&lt; HTTP/1.1 103 Early Hints
&lt; Link: &lt;/vite-dev/assets/index-ilXdZXkf.js&gt;<span class="p">;</span> <span class="nv">rel</span><span class="o">=</span>modulepreload<span class="p">;</span> <span class="nv">as</span><span class="o">=</span>script<span class="p">;</span> <span class="nv">crossorigin</span><span class="o">=</span>anonymous
&lt;
</code></pre></div></div>

<p>And if you want to see 103 Early Hints… anywhere… good luck! I have yet to find an example of a website that serves them.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Basecamp</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> https://basecamp.com 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>
<span class="c"># nothing</span>

<span class="c"># GitHub</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> https://github.com 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>
<span class="c"># nothing</span>

<span class="c"># Shopify</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> https://www.shopify.com 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>
<span class="c"># nothing</span>

<span class="c"># Google</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> https://www.google.com 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>
<span class="c"># nothing</span>

<span class="c"># Someone's tester for 103 Early Hints</span>
<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">-v</span> <span class="nt">--http2</span> https://code103.hotmann.de 2&gt;&amp;1 | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="nt">-E</span> <span class="s1">'103 Early Hints|HTTP/2 103'</span>
&lt; HTTP/2 103
&lt; <span class="nb">link</span>: &lt;/app.min.css&gt;<span class="p">;</span> <span class="nv">as</span><span class="o">=</span>style<span class="p">;</span> <span class="nv">rel</span><span class="o">=</span>preload
&lt;
<span class="c"># ... ok, that returns something</span>
</code></pre></div></div>


          ]]>
        </description>
        <link>https://island94.org/2025/10/rails-103-early-hints-could-be-better-maybe-doesn-t-matter</link>
        <guid isPermaLink="true">https://island94.org/2025/10/rails-103-early-hints-could-be-better-maybe-doesn-t-matter</guid>
        <pubDate>Fri, 17 Oct 2025 15:00:00 +0000</pubDate>
      </item>
      <item>
        <title>Hanami and loading code, faster</title>
        <description>
          <![CDATA[
          <p>I’ll be giving a talk in November in at SF Ruby Conference (<a href="https://luma.com/sfrubyconf2025?coupon=SEP29OCT6">tickets on sale now!</a>). My talk is speeding up your application’s development cycle by taking a critical eye at your application’s development boot. Which all boils down to <em>do less</em>. In Ruby, the easiest, though not the simplest, is to load less code. So yeah, autoloading.</p>

<p>To expand my horizons and hopefully give a better talk, I branched out beyond my experience with Ruby on Rails to talk to Tim Riley about Hanami and how it handles code loading during development.</p>

<p>The following are my notes; it’s not a critical review of Hanami, and it only looks into a very narrow topic: code loading and development performance.</p>

<h3 id="ruby-and-analogously-rails">Ruby, and analogously Rails</h3>

<p>Ruby has a global namespace; constants (classes, modules, CONSTANTS) are global singletons. When your code (or some code you’re loading—Ruby calls each file it loads a “feature” identified by its filesystem path) defines a constant, Ruby is evaluating everything about the constant: the class body, class attributes, basically anything that isn’t in a block or a method definition. And so any constants that are referenced in the code also need to be loaded and evaluated, and class ancestors, and their code and so forth. That’s the main reason booting an application is slow: doing stuff just to load the code that defines all the constants so the program can run.</p>

<p>The name of the game in development, where you want to run a single test or browser a single route or open the CLI, is <em>load less</em>. If you can just avoid loading the constant, you can avoid loading the file the constant is defined in, and avoid loading all of its other dependencies and references until <em>later</em>, when you really need them (or never, in development).</p>

<p>The most common strategy for deferring stuff is: use a string as a stand-in for the constant, and only later, when you really need to convert the string to a constant, do it. An example is in Rails Routes, where you’ll write <code>to: “mycontroller#index”</code> and not <code>MyController</code>. At some point the <code>mycontroller</code> gets constantized to <code>MyController</code>, but that’s <em>later</em>, when you hit that particular route. Another example is Active Record Relation definitions, where you’ll use <code>class_name: “MyModel"</code> instead of <code>class_name: MyModel</code>, which only gets constantized when you use <code>record.my_models</code>.</p>

<p>In Rails, a lot of performance repair work for development is identifying places where a constant <em>shouldn’t</em> be directly referenced and instead should use some other stand-in until it’s really needed. In Rails, it can be confusing, because sometimes you can use a configuration string to refer to a constant, and sometimes you have to use a constant; it is inconsistent.</p>

<h3 id="in-hanami-nearly-everything-has-a-string-key">In Hanami, (nearly) everything has a string key</h3>

<p>Hanami’s approach: make <em>all</em> the application components referencable by a string, called a <code>key</code>. (again, Hanami does quite a bit more than that, I just mean in regards to code loading). Objects are configured by what keys they have dependencies upon, and those objects are <a href="https://guides.hanamirb.org/v2.2/app/container-and-components/#injecting-dependencies-via-deps">injected by the framework</a>. So instead of writing this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span>
  <span class="n">cattr_accessor</span> <span class="ss">:api_client</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">api_client</span> <span class="o">=</span> <span class="no">ApiClient</span><span class="p">.</span><span class="nf">new</span> <span class="c1"># &lt;-- loads that constants</span>

  <span class="k">def</span> <span class="nf">transmit_something</span>
    <span class="no">MyClass</span><span class="p">.</span><span class="nf">api_client</span><span class="p">.</span><span class="nf">transmit</span><span class="p">(</span><span class="s2">"something"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>…you would instead use Hanami’s <code>Deps</code> and write:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span>
  <span class="kp">include</span> <span class="no">Deps</span><span class="p">[</span><span class="s2">"api_client"</span><span class="p">]</span> <span class="c1"># &lt;-- injects the object</span>

  <span class="k">def</span> <span class="nf">transmit_something</span>
    <span class="n">api_client</span><span class="p">.</span><span class="nf">transmit</span><span class="p">(</span><span class="s2">"something"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Keys are global, and keys whose objects have been loaded live in  <code>Hanami.app.keys</code> . If the key’s object hasn’t been loaded yet, it will be converted from a string to… whatever (not just constants)… when it’s needed to execute. Individual objects can be accessed with <code>Hanami.app["thekey"]</code> when debugging, but normal code should get them injected from Deps. By convention, keys match a class name but they don’t have to. This is <a href="https://dry-rb.org/gems/dry-system/">powered by <code>dry-system</code></a>.</p>

<p>Not <em>everything</em> has to have a key. Functional components in Hanami have a key, but classes that embody a bit of data (in Hanami these are called Structs) do not have entries in the app container, and therefore don’t have keys.</p>

<p>If you have something functional coming from outside Hanami, like that <code>ApiClient</code> in the code above or coming from a non-Hanami specific gem or wherever, then you can give them a key and define their lifecycle within the application <a href="https://guides.hanamirb.org/v2.2/app/providers/">via a Provider</a>.</p>

<p><strong>Briefly, commentary:</strong> Some common Rails development discourse is “Rails is too magic”, which is leveled because Rails framework can work out what constants you mean without directly referencing them (e.g. <code>has_many :comments</code> implies there’s an Active Record <code>Comment</code>), and “just use a PORO” (plain old ruby object) when a developer is trying to painfully jam <em>everything</em> into narrow Rails framework primitives. With Hanami:</p>
<ul>
  <li>Hanami has quite a bit of like “here’s a string, now it’s an object 🪄” , but it is consistently applied everywhere and has some nice benefits beyond just brevity, like overloading dependencies.</li>
  <li>Everything does sorta have to be fit into the framework, but there’s an explicit interface for doing so.</li>
</ul>

<h2 id="assorted-notes-in-this-general-theme">Assorted notes in this general theme</h2>

<ul>
  <li>Providers are like “Rails initializers but with more juice” – they register components in the container. They have lifecycle hooks (prepare, start, stop) for managing resources. They’re lazily loaded and can have namespace capabilities for organizing related components.</li>
  <li>Hanami encourages namespacing over Rails’ flat structure. “Slices” provide first-class support for modularizing applications like Rails Engines. Each slice has its own container and can have its own providers, creating bounded contexts.</li>
  <li>Hanami uses Zeitwerk for code loading.</li>
  <li>Dev server uses Guard to restart puma in development. Because everything is so modularized, it’s good enough.</li>
  <li>Code is lazy-loaded in development but fully pre-loaded in production.</li>
</ul>

<h2 id="where-things-are-going">Where things are going</h2>

<p>In the Hanami Discord, Tim shared a proposal for building out a plugin system for Hanami… and to me looks a lot like Railties and <a href="https://edgeapi.rubyonrails.org/classes/ActiveSupport/LazyLoadHooks.html">ActiveSupport lazy load hooks</a>:</p>

<blockquote>
  <p>Using your grant, I propose to implement this Hanami extensions API. The end<br />
goal will be to:</p>

  <ul>
    <li>Allow all first-party “framework extension code” to move from the core Hanami<br />
gem back into the respective Hanami subsystem gems (e.g. the core Hanami<br />
gem should no longer have specific extension logic for views).</li>
    <li>Allow third-party gems to integrate with Hanami on an equal footing to the first-<br />
party gems.</li>
  </ul>

  <p>This will require building at least some of the following:</p>

  <ul>
    <li>Ability for extensions to be detected by or registered with the Hanami framework.</li>
    <li>Ability to enhance or replace Hanami CLI commands.</li>
    <li>Ability to register new configuration settings on the Hanami app.</li>
    <li>Hooks for extending core Hanami classes.</li>
    <li>Hooks for adding logic to Hanami’s app boot process.</li>
    <li>Adjustments to first-party Hanami gems to allow their classes to be used in an un-extended state when required.</li>
    <li>A separate “extension” gem that can allow Hanami extensions to register their extensions without depending on the main Hanami gem.</li>
  </ul>
</blockquote>

<h3 id="and-how-this-all-started">And how this all started</h3>

<p>Ending on what I originally shared with Tim to start our discussion, which I share partly cause I think it’s funny how easily I can type out 500 words today on a thesis of like “why code loading in Ruby is hard”:</p>

<blockquote>
  <p><strong>Making boot fast; don’t load the code unless you need it</strong></p>

  <p>Don’t load code until/unless you need it. DEFINITELY don’t create database connections or make any http calls or invoke other services. How Rails does it, Rails autoloads as much as possible (framework, plugin/extension, and application code), either via Ruby Autoload or Zeitwerk. The architecture challenge is: how do you set up configuration properties, so that <em>when</em> the code is loaded (and all the different pieces of framework/plugin/extension/application get their fingers on it), it is configured with the properties y’all ultimately want on it? There are two mechanisms:</p>

  <ul>
    <li>A configuration hash, that is intended to be made up (somewhat) of primitives that are dependency free and thus don’t load a bunch of code themselves,</li>
    <li>
      <p>A callback hook that is placed within autoloaded code, that one can register against and use it to pull data out of configuration (framework/plugin/extension) or override/overload behavior (your application), that is only triggered when the code is loaded for reals. Extensions put this in a Railtie, maybe you put it in an initializer.,<br />
 The practical problems are:</p>
    </li>
    <li>Ideally everything was stateless and just pulled values from configuration and got torn down after every request/transaction/task, but also:
      <ul>
        <li>Some objects are long-lived, and you don’t want to constantly be tearing them down,</li>
        <li>Sometimes locality of properties is nice and it would be annoying to be like “either use this locally assigned value OR use this value from really far away in this super deep config object”.,</li>
        <li>Hopefully that config object is thread and fiber safe if you’re gonna be changing it later and you’re not really sure what’s happening right then in your application lifecycle.,</li>
      </ul>
    </li>
    <li>A hook doesn’t exist in the place that you want to hook into, so you either have to:
      <ul>
        <li>go upstream and get a hook added; which is annoying (just hook every class and feature, why not?!),</li>
        <li>load the code prematurely so you can directly modify it,</li>
      </ul>
    </li>
    <li>When something else (framework/plugin/extension/application) prematurely loads the code (chaotically or intentionally), before you add your own configuration or before you register a hook callback, and the behavior is stateful or had to be backed out (example: it’s configuration for connections in a connection pool and early invocation fills the pool with connection objects with premature configuration. So to re-configure you have to drain the pool of the old prematurely configured connections and maybe that’s hard),</li>
    <li>Examples of pain:
      <ul>
        <li>Devise.
          <ul>
            <li>It’s route (devise_for) loads your active record model, when routes load, which in &lt; Rails 8.0 was when your app boots, which is premature otherwise,</li>
            <li>Changing the layout of devise controllers. They don’t have load hooks (maybe they should?). You can subclass them and manually mount them in your app, but htat’s annoying,</li>
          </ul>
        </li>
        <li>Every initializer where you try to assign config and maybe it won’t work cause something else already hooked it and loaded it and it’s baked.,</li>
      </ul>
    </li>
  </ul>

  <p><strong>How Hanami does it:</strong></p>

  <blockquote>
    <p>@inouire in the Rails Discord shared a couple of links: You can find some information about Hanami way of handling dependency container: <a href="https://guides.hanamirb.org/v2.2/app/container-and-components/">https://guides.hanamirb.org/v2.2/app/container-and-components/</a> Also autoloading: <a href="https://guides.hanamirb.org/v2.2/app/autoloading/">https://guides.hanamirb.org/v2.2/app/autoloading/</a> And info about lazy boot: <a href="https://guides.hanamirb.org/v2.2/app/booting/">https://guides.hanamirb.org/v2.2/app/booting/</a></p>
  </blockquote>

  <p>Hanami questions from Ben:</p>
  <ul>
    <li>Components are singletons that are pure-ish functions? Do they get torn down / recreated on every request, or does the same object exist for the lifetime of the application?,</li>
    <li>Is there a pattern of assigning properties to class variables? Seems like most stuff is pure-ish functions. How do you handle objects that you want to be long-lived, like Twitter::Client.new or something?,</li>
    <li>I didn’t see plugins/extensions. Are you required to subclass and overload a component or can you poke around in an existing class/component? Can I defer poking around in a component until it’s loaded? (like an autoload hook),</li>
    <li>Are there any patterns you see people do, that would slow down their hanami app’s boot, that you wish they didn’t do?</li>
  </ul>
</blockquote>

          ]]>
        </description>
        <link>https://island94.org/2025/10/hanami-and-loading-code-faster</link>
        <guid isPermaLink="true">https://island94.org/2025/10/hanami-and-loading-code-faster</guid>
        <pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title>Serializing ViewComponent for Active Job and Turbo Broadcast Later</title>
        <description>
          <![CDATA[
          <p>I recently started using ViewComponent. I’ve been gradually removing non-omikase libraries from my Rails applications over the past decade, but ViewComponent is alright. I was strongly motivated by Boring Rails’ <a href="https://boringrails.com/articles/self-updating-components/">“Hotwire components that refresh themselves”</a>, cause matching up all the dom ids and stream targets between views/partials and… wherever you put your Stream and Broadcast renderers is a pain.</p>

<p>You might also know me as the GoodJob author. So of course I wanted to have my Hotwire components refresh themselves <em>later</em> and move stream broadcast rendering into a background job. I to simply call <code>MessagesComponent.add_message(message)</code> and broadcasts an update <em>later</em> to the correct stream and target that are all nice and compactly stored inside of the View Component:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessagesComponent</span> <span class="o">&lt;</span> <span class="no">ApplicationComponent</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">user</span>
    <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_action_later_to</span><span class="p">(</span>
      <span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">,</span>
      <span class="ss">action: :append</span><span class="p">,</span>
      <span class="ss">target: </span><span class="no">ActionView</span><span class="o">::</span><span class="no">RecordIdentifier</span><span class="p">.</span><span class="nf">dom_id</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:messages</span><span class="p">),</span>
      <span class="ss">renderable: </span><span class="no">MessageComponent</span><span class="p">.</span><span class="nf">serializable</span><span class="p">(</span><span class="ss">message: </span><span class="n">message</span><span class="p">),</span> <span class="c1"># &lt;- that right there</span>
      <span class="ss">layout: </span><span class="kp">false</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">:,</span> <span class="n">messages</span><span class="p">:)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="n">messages</span>
  <span class="k">end</span>

  <span class="n">erb_template</span> <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
    &lt;%= helpers.turbo_stream_from @user, :message_list %&gt;
    &lt;div id="&lt;%= dom_id(@user, :messages) %&gt;"&gt;
      &lt;%= render MessageComponent.with_collection @messages %&gt;
    &lt;/div&gt;
</span><span class="no">  HTML</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That’s a simple example</p>
<h3 id="making-a-renderable-work-later">Making a renderable work <em>later</em></h3>

<p>The ViewComponent team can be really proud of <a href="https://github.com/rails/rails/pull/37919">achieving first-class support Rails</a> for a library like ViewComponent. Rails already supported views and partials and now it also supports an object that quacks like a <code>renderable</code>.</p>

<p>For ViewComponent to be compatible with Turbo Broadcasting <em>later</em>, those View Components need to be serializable by Active Job. That’s because Turbo Rail’s <code>broadcast_*_later_to</code> takes the arguments it was passed and serializes them into a job so they can be run elsewhere better/faster/stronger.</p>

<p>To serialize a ViewComponent, we need to collect its initialization arguments, so that we can reconstitute it in that <em>elsewhere</em> place where the job is executed and the ViewComponent is re-initialized. To initialize a ViewComponent, you call <code>new</code> which calls its  <code>initialize</code> method. To patch into that, there’s a couple of different strategies I thought of taking:</p>

<ul>
  <li>Make the developer figure out which properties of an existing ViewComponent (ivars, attributes) should be grabbed and how to do that.</li>
  <li><code>prepend</code> a module method in front of <code>ViewComponent#initialize</code>. Our module would always have to be at the top of the ancestors hierarchy, because subclasses might overload <code>initialize</code> themselves, so we’d have to have an <code>inherited</code> callback that would prepend the module (again) every time that happened</li>
  <li>Simply initialize the ViewComponent via another, more easily interceptable method, when you want it to be serializable.</li>
</ul>

<p>I respect that ViewComponent really wanted a ViewComponent to be <em>just like any other Ruby object</em> that you create with <code>new</code> and <code>initialize</code> , but it makes this particular goal, serialization, rather difficult. You can maybe see the ViewComponent maintainers ran into a few problems with initialization themselves: a collection of ViewComponents can optionally have each member initialized with an iteration number, but to do that <a href="https://github.com/ViewComponent/view_component/blob/1ed16e33ad70e45ffc08de3b68760a83d08e912e/lib/view_component/base.rb#L667-L712">ViewComponent has to introspect the <code>initialize</code> parameters</a> to determine if the object implements the iteration parameter to decide whether to send it 🫠 That parameter introspection also means that we can’t simply prepend a redefined generic <code>initialize(*args, **kwargs)</code> because that would break the collection feature. Not great 💛</p>

<p>So, given the compromises i’m willing to make between ergonomics and complexity and performance, given my abilities, and my experience, and what I know at this time…. I decided to simply make a new initializing class method, named <code>serializable</code>. If I want my ViewComponent to be serializable, I initialize it with <code>MyComponent.serializable(foo, bar:)</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="c1"># config/initializers/view_component.rb</span>
<span class="c1">#</span>
<span class="c1"># Instantiate a ViewComponents that is (optionally) serializable by Active Job</span>
<span class="c1"># but otherwise behaves like a normal ViewComponent. This allows it to be passed</span>
<span class="c1"># as a renderable into `broadcast_action_later_to`.</span>
<span class="c1">#</span>
<span class="c1"># To use, include the `ViewComponent::Serializable` concern:</span>
<span class="c1">#</span>
<span class="c1">#  class ApplicationComponent &lt; ViewComponent::Base</span>
<span class="c1">#    include ViewComponent::Serializable</span>
<span class="c1">#  end</span>
<span class="c1">#</span>
<span class="c1"># And then call `serializable` instead of `new` when instantiating:</span>
<span class="c1">#</span>
<span class="c1">#   Turbo::StreamsChannel.broadcast_action_later_to(</span>
<span class="c1">#     :admin, client, :messages,</span>
<span class="c1">#     action: :update,</span>
<span class="c1">#     target: ActionView::RecordIdentifier.dom_id(client, :messages),</span>
<span class="c1">#     renderable: MessageComponent.serializable(message: message)</span>
<span class="c1">#   )</span>
<span class="c1">#</span>
<span class="k">module</span> <span class="nn">ViewComponent</span>
  <span class="k">module</span> <span class="nn">Serializable</span>
    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

    <span class="n">included</span> <span class="k">do</span>
      <span class="nb">attr_reader</span> <span class="ss">:serializable_args</span>
    <span class="k">end</span>

    <span class="n">class_methods</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nf">serializable</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">).</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">instance</span><span class="o">|</span>
          <span class="n">instance</span><span class="p">.</span><span class="nf">instance_variable_set</span><span class="p">(</span><span class="ss">:@serializable_args</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">ruby2_keywords</span><span class="p">(</span><span class="ss">:serializable</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ViewComponentSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">ObjectSerializer</span>
  <span class="k">def</span> <span class="nf">serialize?</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
    <span class="n">argument</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">ViewComponent</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">argument</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:serializable_args</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span>
      <span class="s2">"component"</span> <span class="o">=&gt;</span> <span class="n">view_component</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span>
      <span class="s2">"arguments"</span> <span class="o">=&gt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">.</span><span class="nf">serializable_args</span><span class="p">),</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="nb">hash</span><span class="p">[</span><span class="s2">"component"</span><span class="p">].</span><span class="nf">safe_constantize</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">[</span><span class="s2">"arguments"</span><span class="p">]))</span>
  <span class="k">end</span>

  <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="p">.</span><span class="nf">add_serializers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Real talk:</strong> I haven’t packaged this into a gem. I didn’t want to maintain it for everyone, and there’s some View Component features (like collections) it doesn’t handle yet because I haven’t used them (yet). I think this sort of thing is first class behavior for the current state of Rails and Active Job and Turbo, and I’d rather the library maintainers figure out what the best balance of ergonomics, complexity, and performance is for them. I’ve been gently poking them about it in their Slack; they’re great and I believe we can arrive at something even better than this patch I’m running with myself for now 💖</p>


          ]]>
        </description>
        <link>https://island94.org/2025/10/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</link>
        <guid isPermaLink="true">https://island94.org/2025/10/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</guid>
        <pubDate>Mon, 06 Oct 2025 14:59:00 +0000</pubDate>
      </item>
      <item>
        <title>Notes from building a “who is doing what right now on our website?” presence feature with Action Cable</title>
        <description>
          <![CDATA[
          <p><img src="/uploads/2025/presence-screenshot.jpg" alt="A screenshot of my application with little presence indicators decorating content" /></p>

<p>I recently was heads down building a “presence” feature for the case and communications management part of my startup’s admin dashboard. The idea being that our internal staff can see what their colleagues are working on, better collaboarate together as a team of overlapping responsibility, and reduce duplicative work.</p>

<p>The follow is more my notes than a cohesive narrative. But maybe you’ll get something out of it.</p>

<h3 id="big-props">Big props</h3>

<p>In building this feature, I got a lot of value from:</p>
<ul>
  <li><a href="https://github.com/basecamp/once-campfire">Basecamp’s Campfire</a> app, recently open sourced, which has a sorta similar feature.</li>
  <li>Rob Race’s <a href="https://robrace.dev/blog/turbo-morphs-presence-channels-and-typing-indicators/#presence-channel">Developer Notes about building a Presence Feature</a></li>
  <li>AI slop, largely Jetbrains Junie agent. Not because it contributed code to the final feature, but because I had the agent try to implement from scratch 3 different times, and while none of them fully worked (let alone met my quality standards or covered all edges), it helped sharpen the outlines and common shapes and surfaced some API methods to click into that I wasn’t aware of. And made the difference between undirected poking around vs being like “ok, this is gonna require no more than 5 objects in various places working together; let’s go!”</li>
</ul>

<h3 id="the-big-idea">The big idea</h3>

<p>The feature I wanted to build would track multiple presence keys at the same time. So if someone is on a deep page (<code>/admin/clients/1/messages</code>) they’d be present for that specific client, any client, as well as the dashboard a whole.</p>

<p>I also wanted to keep separate “track my presence” and “display everyone’s presence”.</p>

<p>What I ended up with was:</p>

<ol>
  <li>Client in the browser subscribes to the <code>PresenceChannel</code> with a <code>key</code> param. It also sets up a setInterval heartbeat to send down a <code>touch</code> message every 30 seconds. This is a Stimulus controller that uses the Turbo cable connection, cause it’s there.</li>
  <li>On the server, the PresenceChannel has <code>connected</code>, <code>disconnected</code>, and <code>touch</code> actions and stores the <code>key</code> passed during connect. It writes to an Active Record model UserPresence and calls <code>increment</code>, <code>decrement</code>, and <code>touch</code> respectively.</li>
  <li>The Active Record model persists all these things atomically (Postgres!) and then triggers vanilla Turbo Stream Broadcast Laters (GoodJob!).</li>
  <li>The frontend visually is all done with vanilla Turbo Stream Broadcasts over the vanilla Turbo::StreamsChannel appending to and removing unique dom elements that are avatars of the present users.</li>
</ol>

<p>It works! I’m happy with it.</p>

<p>Ok, let’s get some grumbles out.</p>

<h3 id="action-cable-could-have-a-bit-more-conceptual-integrity">Action Cable could have a bit more conceptual integrity</h3>

<p>I once built some Action Cable powered features <a href="https://github.com/bensheldon/open311status/pull/59">about 7 years ago</a>, before Turbo Broadcast Streams, and it wasn’t my favorite. Since then, Turbo Broadcast Streams totally redeemed my feelings about Action Cable… and then I had to go real deep again on Action Cable to build this Presence feature.</p>

<p>At first I thought it was me, “why am I not just getting this?”, but as I became more familiar I came to the conclusion: nah, there’s just a lot of conceptual… noise… in the interface. I get it, it’s complicated.</p>

<p>In the browser/client: You have a Connection, a Connection “opens” and “closes”, but also “reconnects” (reopens?). Then you create a Subscription on the Connection by Subscribing to a named Channel (which is a backend/server concept); Subscriptions have a “connected” callback when <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscription.js#L9">“subscription has been successfully completed”</a> (subscribed?) and “disconnected” <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscription.js#L13">“when the client has disconnected with the server”</a> (a Connection disconnect). If the Connection closes, reconnects, and reopens, then the Channel’s disconnected and reconnected callbacks are triggered again. Subscriptions can also be <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/subscriptions.js#L50">“rejected”</a>. You can see some of this drift too in the <a href="https://github.com/rails/rails/blob/b927e4d45907a3c2eaecc9a31095337856b71e95/actioncable/app/javascript/action_cable/internal.js#L2-L8">message types key/value constants</a> .</p>

<p>…as a concrete example: you don’t <code>connection.subscribe(channelName, ...)</code> you <code>consumer.subscriptions.create(channelName, ...)</code> (oh jeez, it’s called Consumer). Turbo Rails tries to clean up some of this as you can call <code>cable.subscribeTo(channelName, ...)</code>to subscribe to a Channel using Turbo Stream Broadcasts’ existing connection. But even that is compromised because you don’t <code>subscribeTo</code> a channel, you <code>subscribeTo</code> by passing an object of <code>{ channel: channelName, params: paramsforChannelSubscribe }</code> .  Here’s an <a href="https://github.com/basecamp/once-campfire/blob/3d0a10dbdd6d24941f22595072c2021f0c2dca10/app/javascript/controllers/presence_controller.js#L13">example from Campfire.</a></p>

<p>On the server, I have accepted that the Connection/Channel/Streams challenges me, which is probably because of the inherent complexity of multiplexing Streams (no, not Turbo “Streams”, Action Cable “Streams”) over Channels that are themselves multiplexed over connection(s), and it makes my head spin. . That Channels connect Streams, and one Broadcasts on Streams, and one can also <code>transmit</code> on a channel to a specific client in a Channel, and often one does <code>broadcast(channel, payload)</code> but <code>channel</code> may be the name of a Stream. My intuition is that Streams were bolted onto Action Cable’s Chanel implementation rather part of the initial conception though it all <a href="https://github.com/rails/rails/pull/22586">landed in Rails at once</a>.</p>

<p>I’m a pedantic person, and it’s tiring for me to write about this stuff with precision. Active Storage named variants—with its record-blob-variant-blob-record—has as an analogous vibe of “I guess it works and I have a hard time looking directly at it”.</p>

<p>I have immense compassion and sympathy and empathy for trying to wrangle something as complex as Action Cable. And also fyi, it <em>is</em> a lot.</p>

<h3 id="testing">Testing</h3>

<ul>
  <li>You’ll need to isolate and reset Action Cable after individual tests to prevent queries from being made after the transaction rollback, or changing of pinned database connection:<code>ActionCable.server.restart</code></li>
  <li>If you see deadlocks, <code>pg.exec</code> freezes or AR gives you <code>undefined method 'count' for nil</code> inside of Active Record <a href="https://github.com/rails/rails/blob/b0c813bc7b61c71dd21ee3a6c6210f6d14030f71/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L167">because the query result object is <code>nil</code></a>, that’s a sign that the database connection is being read out-of-order/unsafely asynchronously/all whack.</li>
</ul>

<h3 id="page-lifecycle">Page lifecycle</h3>

<p>Live and die by the <a href="https://developer.chrome.com/docs/web-platform/page-lifecycle-api">Browser Page Lifecycle API</a>.</p>

<p>Even with <code>data-turbo-permanent</code>, Stimulus controllers and <code>turbo-cable-streams</code> JavaScript get disconnected and reconnected. Notice that there is a lot of use of nextTick/nextFrame to try to smooth over it.</p>

<ul>
  <li><code>hotwired/turbo</code>: [<turbo-stream-source> does not work as permanent](https://github.com/hotwired/turbo/issues/868#issuecomment-1419631586)</turbo-stream-source></li>
  <li>Miles Woodroffe: <a href="https://mileswoodroffe.com/articles/out-of-body-experience-with-turbo">“Out of body experience with turbo”</a> about DOM connect/disconnects during Turbo Drive</li>
</ul>

<p>And general nits that otherwise would necessitate less delicate coding.</p>

<ul>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/50039">Add ability to detect a half-open connection</a> by adding a client <code>pong</code> to the existing server <code>ping</code>. Action Cable currently <a href="https://github.com/rails/rails/blob/4b494a53e1e10f0c523266c38d4f7f22b40fa021/actioncable/app/javascript/action_cable/connection.js#L142-L143">filters out ping messages</a>, so not possible to do a pong or heartbeat without a change or patch.</li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/44653">ActionCable: Subscribe uniquely</a> about weird behavior when  subscriptions with duplicated identifiers happen</li>
  <li><code>hotwired/turbo-rails</code>: <a href="https://github.com/hotwired/turbo-rails/issues/559">“Duplicate requests from repeated turbo-cable-stream-source signed-stream-name values”</a></li>
  <li><code>hotwired/stimulus</code> <a href="https://github.com/hotwired/stimulus/issues/698">How to know when every stimulus controllers are connected ?</a></li>
</ul>

<p>I ended up making a whole new custom element <code>data-permanent-cable-stream-source</code>. All that to wait a tick before actually unsubscribing the channel in case the element is reconnected to the page again by <code>data-turbo-permanent</code>. What does that mean for unload events? Beats me for now.</p>

<h3 id="what-am-i-doing-about-it">What am I doing about it?</h3>

<p>All this work did generate some upstream issues and PRs. I mostly worked around them in my own app, but maybe we’ll roll the rock uphill a little bit:</p>

<ul>
  <li><code>hotwired/turbo-rails</code>: <a href="https://github.com/hotwired/turbo-rails/pull/756">Allow <code>turbo-cable-stream-source</code> to be compatible with <code>data-turbo-permanent</code></a></li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/55825">Fix Action Cable <code>after_subscribe</code> callback to call after deferred subscription confirmation transmit</a></li>
  <li><code>rails/rails</code>: <a href="https://github.com/rails/rails/pull/55824">Add <code>success_callback</code> to Action Cable’s <code>stream_from</code> and <code>stream_to</code></a></li>
  <li><code>reclaim-the-stack/actioncable-enhanced-postgresql-adapter</code>: <a href="https://github.com/reclaim-the-stack/actioncable-enhanced-postgresql-adapter/pull/6">Fix incorrect escaping of large payloads</a></li>
</ul>

<h3 id="notes-right">Notes, right?</h3>

<p>Yep, these are my notes. Maybe they’re helpful. No big denouement. The feature works, I’m happy with it, my teammates are happy, and I probably wouldn’t have attempted it at all if I didn’t have such positive thoughts about Action Cable going in, even if the work itself got deeply into the weeds.</p>


          ]]>
        </description>
        <link>https://island94.org/2025/10/notes-from-building-a-who-is-doing-what-right-now-on-our-website-presence-feature-with-action-cable</link>
        <guid isPermaLink="true">https://island94.org/2025/10/notes-from-building-a-who-is-doing-what-right-now-on-our-website-presence-feature-with-action-cable</guid>
        <pubDate>Mon, 06 Oct 2025 14:59:00 +0000</pubDate>
      </item>
      <item>
        <title>Serializing ViewComponent for Active Job and Turbo broadcast later</title>
        <description>
          <![CDATA[
          <p>I recently started using ViewComponent. I’ve been gradually removing non-omikase libraries from my Rails applications over the past decade, but ViewComponent is alright. I was strongly motivated by Boring Rails’ <a href="https://boringrails.com/articles/self-updating-components/">“Hotwire components that refresh themselves”</a>, cause matching up all the dom ids and stream targets between views/partials and …. wherever you put your Stream and Broadcast renderers is a pain.</p>

<p>You might be familiar with me as the GoodJob author. So of course I wanted to have my Hotwire components refresh themselves <em>later</em> and move stream broadcast rendering into a background job. I simply call <code>MessagesComponent.add_message(message)</code> and broadcasts an update <em>later</em> to the correct stream and target that are all nice and local when defined inside the View Component:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessageListComponent</span> <span class="o">&lt;</span> <span class="no">ApplicationComponent</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">user</span>
    <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_action_later_to</span><span class="p">(</span>
      <span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">,</span>
      <span class="ss">action: :append</span><span class="p">,</span>
      <span class="ss">target: </span><span class="no">ActionView</span><span class="o">::</span><span class="no">RecordIdentifier</span><span class="p">.</span><span class="nf">dom_id</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:message_list</span><span class="p">),</span>
      <span class="ss">renderable: </span><span class="no">MessageComponent</span><span class="p">.</span><span class="nf">serializable</span><span class="p">(</span><span class="ss">message: </span><span class="n">message</span><span class="p">),</span> <span class="c1"># &lt;- that right there</span>
      <span class="ss">layout: </span><span class="kp">false</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">:,</span> <span class="n">messages</span><span class="p">:)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="n">messages</span>
  <span class="k">end</span>

  <span class="n">erb_template</span> <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
    &lt;%= helpers.turbo_stream_from @user, :message_list %&gt;
    &lt;div id="&lt;%= dom_id(@user, :message_list) %&gt;"&gt;
      &lt;%= render MessageComponent.with_collection @messages %&gt;
    &lt;/div&gt;
</span><span class="no">  HTML</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That’s a simple example.</p>

<h3 id="making-a-renderable-work-later">Making a renderable work <em>later</em></h3>

<p>The ViewComponent team can be really proud of <a href="https://github.com/rails/rails/pull/37919">adding first-class support to Rails</a> for a library like ViewComponent. Rails already supported views and partials and now it also supports an object that quacks like a <code>renderable</code>  .</p>

<p>For ViewComponent to be compatible with Turbo Broadcasting <em>later</em>, those View Components need to be serializable by Active Job. That’s because Turbo Rail’s <code>broadcast_*_later_to</code> takes the arguments it was passed and serializes them into a job so they can be run elsewhere better/faster/stronger.</p>

<p>To serialize a ViewComponent, we need to collect its initialization arguments so that we can reconstitute it in that <em>elsewhere</em> place where the job is executed and the ViewComponent is re-initialized. To initialize a ViewComponent, you call <code>new</code> which calls its  <code>initialize</code> method. To patch into that, there are a couple of different strategies I thought of taking:</p>

<ul>
  <li>
    <p>Make the developer figure out which properties of an existing ViewComponent (ivars, attributes) should be grabbed and how to do that.</p>
  </li>
  <li>
    <p><code>prepend</code> a module method in front of <code>ViewComponent#initialize</code>. Our module would always have to be at the top of the ancestors hierarchy, because subclasses might overload <code>initialize</code> themselves, so we’d have to have an <code>inherited</code> callback that would prepend the module (again) every time that happened</p>
  </li>
  <li>
    <p>Simply initialize the ViewComponent via another, more easily interceptable method, when you want it to be serializable.</p>
  </li>
</ul>

<p>I respect that ViewComponent maintainers really want a ViewComponent to be <em>just like any other Ruby object</em> that you create with <code>new</code> and <code>initialize</code> , but it makes this particular goal, serialization, rather difficult. You can maybe see the ViewComponent maintainers ran into a few problems with initialization themselves: a collection of ViewComponents can optionally have each member initialized with an iteration number, but to do that <a href="https://github.com/ViewComponent/view_component/blob/1ed16e33ad70e45ffc08de3b68760a83d08e912e/lib/view_component/base.rb#L667-L712">ViewComponent has to introspect the <code>initialize</code> parameters</a>  to determine if the object implements the iteration parameter to decide whether to send it 🫠 That parameter introspection also means that we can’t simply prepend a redefined generic <code>initialize(*args, **kwargs)</code> because that would break the collection feature. Not great 💛</p>

<p>So, given the compromises I’m willing to make between ergonomics and complexity and performance, given my abilities, and my experience, and what I know at this time…. I decided to simply make a new initializing class method, named <code>serializable</code>. If I want my ViewComponent to be serializable, I initialize it with <code>MyComponent.serializable(foo, bar:)</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/view_component.rb</span>
<span class="c1">#</span>
<span class="c1"># Instantiate a ViewComponents that is (optionally) serializable by Active Job</span>
<span class="c1"># but otherwise behaves like a normal ViewComponent. This allows it to be passed</span>
<span class="c1"># as a renderable into `broadcast_action_later_to`.</span>
<span class="c1">#</span>
<span class="c1"># To use, include the `ViewComponent::Serializable` concern:</span>
<span class="c1">#</span>
<span class="c1">#  class ApplicationComponent &lt; ViewComponent::Base</span>
<span class="c1">#    include ViewComponent::Serializable</span>
<span class="c1">#  end</span>
<span class="c1">#</span>
<span class="c1"># And then call `serializable` instead of `new` when instantiating:</span>
<span class="c1">#</span>
<span class="c1">#   Turbo::StreamsChannel.broadcast_action_later_to(</span>
<span class="c1">#     :admin, user, :messages,</span>
<span class="c1">#     action: :update,</span>
<span class="c1">#     target: ActionView::RecordIdentifier.dom_id(user, :messages),</span>
<span class="c1">#     renderable: MessageComponent.serializable(message: message)</span>
<span class="c1">#   )</span>
<span class="c1">#</span>
<span class="k">module</span> <span class="nn">ViewComponent</span>
  <span class="k">module</span> <span class="nn">Serializable</span>
    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

    <span class="n">included</span> <span class="k">do</span>
      <span class="nb">attr_reader</span> <span class="ss">:serializable_args</span>
    <span class="k">end</span>

    <span class="n">class_methods</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nf">serializable</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">).</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">instance</span><span class="o">|</span>
          <span class="n">instance</span><span class="p">.</span><span class="nf">instance_variable_set</span><span class="p">(</span><span class="ss">:@serializable_args</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">ruby2_keywords</span><span class="p">(</span><span class="ss">:serializable</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ViewComponentSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">ObjectSerializer</span>
  <span class="k">def</span> <span class="nf">serialize?</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
    <span class="n">argument</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">ViewComponent</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">argument</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:serializable_args</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span>
      <span class="s2">"component"</span> <span class="o">=&gt;</span> <span class="n">view_component</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span>
      <span class="s2">"arguments"</span> <span class="o">=&gt;</span> <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">serialize</span><span class="p">(</span><span class="n">view_component</span><span class="p">.</span><span class="nf">serializable_args</span><span class="p">),</span>
    <span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
    <span class="nb">hash</span><span class="p">[</span><span class="s2">"component"</span><span class="p">].</span><span class="nf">safe_constantize</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="no">ActiveJob</span><span class="o">::</span><span class="no">Arguments</span><span class="p">.</span><span class="nf">deserialize</span><span class="p">(</span><span class="nb">hash</span><span class="p">[</span><span class="s2">"arguments"</span><span class="p">]))</span>
  <span class="k">end</span>

  <span class="no">ActiveJob</span><span class="o">::</span><span class="no">Serializers</span><span class="p">.</span><span class="nf">add_serializers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Real talk:</strong> I haven’t packaged this into a gem. I didn’t want to maintain it for everyone, and there are some View Component features (like collections) it doesn’t handle yet because I haven’t used them (yet). I think this sort of thing is first-class behavior for the current state of Rails and Active Job and Turbo, and I’d rather the library maintainers figure out what the best balance of ergonomics, complexity, and performance is for them. I’ve been gently poking them about it in their Slack; they’re great 💖</p>

          ]]>
        </description>
        <link>https://island94.org/2025/09/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</link>
        <guid isPermaLink="true">https://island94.org/2025/09/serializing-viewcomponent-for-active-job-and-turbo-broadcast-later</guid>
        <pubDate>Sun, 14 Sep 2025 14:17:00 +0000</pubDate>
      </item>
      <item>
        <title>Building deterministic, reproducible assets with Sprockets</title>
        <description>
          <![CDATA[
          <p>This is a story that begins with airplane wifi, and ends with the recognition that everything is related in web development.</p>

<p>While on slow airplane wifi, I was syncing this blog’s git repo, and it was taking forever. That was surprising because this blog is mostly text, which I expected shouldn’t require many bits to transfer for Git. Looking more deeply into it (I had a 4-hour flight), I discovered that the vast majority of the bits were in the git branch of built assets that gets deployed to GitHub Pages (<code>gh-pages</code>) when I build my Rails app into a static site <a href="https://island94.org/2025/01/living-parklife-with-rails-coming-from-jekyll">with Parklife</a>. And the bits in that branch were assets (css, javascript, and a few icons and fonts) built by Sprockets, whose contents were changing every time the blog was built and published. What changed?</p>

<ul>
  <li>Sprockets creates a file manifest that is randomly named <code>".sprockets-manifest-#{SecureRandom.hex(16)}.json"</code>.</li>
  <li>Within the file manifest, there is an entry for every file built by Sprockets, that includes that original asset’s <code>mtime</code>—when the file on the filesystem was last touched, even if the contents didn’t change.</li>
  <li>By default, Sprockets generates gzipped <code>.gz</code> copies of compressible assets, and it includes the uncompressed file’s <code>mtime</code> in the gzipped file’s header, producing different binary content even though the compressed payloads’ contents didn’t change.</li>
</ul>

<p>Do I need that? Let’s go through it.</p>

<h3 id="the-sprockets-manifest">The Sprockets Manifest</h3>

<p>The Sprockets Manifest is pretty cool (I mean <code>public/assets/.sprockets-manifest-*.json</code>, not <code>app/assets/config/manifest.js</code> which is different). The manifest is how Sprockets is able to add unique cache-breaking digests to each file while still remembering what the file was originally named. When building assets on a server with a persisted filesystem, Sprockets also uses the manifest to keep <em>old</em> versions of files around: <code>bin/rails assets:clean</code> will keep the last 3 versions of built assets, which is helpful for blue-green deployments. Heroku also has a <a href="https://devcenter.heroku.com/articles/rails-4-asset-pipeline#multiple-versions">bunch of custom stuff</a> powered by this too to make deployments seamless.</p>

<p>But none of that is applicable to me and this blog, which gets built from scratch and committed to Git. Or for that matter, when I build some of my other Rails apps with Docker; not unnecessarily busting my cached file layers would be nice 💅</p>

<p>The following is a monkeypatch, which works with Sprockets <em>right now</em> but I’m hoping to ultimately propose as a configuration option upstream (as others <a href="https://github.com/rails/sprockets/issues/707">have proposed</a>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="k">module</span> <span class="nn">SprocketsManifestExt</span>
  <span class="k">def</span> <span class="nf">generate_manifest_path</span>
    <span class="c1"># Always generate the same filename</span>
    <span class="s2">".sprockets-manifest-</span><span class="si">#{</span><span class="s1">'0'</span> <span class="o">*</span> <span class="mi">32</span><span class="si">}</span><span class="s2">.json"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">save</span>
    <span class="c1"># Use the epoch as the mtime for everything</span>
    <span class="n">zero_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">utc</span>
    <span class="vi">@data</span><span class="p">[</span><span class="s2">"files"</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">_path</span><span class="p">,</span> <span class="n">asset</span><span class="p">)</span><span class="o">|</span>
      <span class="n">asset</span><span class="p">[</span><span class="s2">"mtime"</span><span class="p">]</span> <span class="o">=</span> <span class="n">zero_time</span>
    <span class="k">end</span>

    <span class="k">super</span>
  <span class="k">end</span>

  <span class="no">Sprockets</span><span class="o">::</span><span class="no">Manifest</span><span class="p">.</span><span class="nf">prepend</span> <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now, if you’re like me (on a plane), you might be curious about why the obsessive tracking of <code>mtime</code>. I have worked alongside several people in my career with content-addressable storage obsessions. The idea being: focus on the contents, not the container. And <code>mtime</code> is very much a concern of the <em>container</em>. But Sprockets <a href="https://github.com/rails/sprockets/blob/58759051635c3d660421908702b6ade729dd4ab8/README.md#cache">makes the case</a> that “Compiling assets is slow” so I can see it’s useful to quickly check when the file was modified, in a lot of cases… but not mine.</p>

<p>Let’s move on.</p>

<h3 id="gzip-but-maybe-you-dont-need-it">GZip, but maybe you don’t need it</h3>

<p>So… everything in web development is connected. While wondering why new copies of every <code>.gz</code> file were being committed on every build, I remembered what my buddy Rob recently did in Rails: <a href="https://github.com/rails/rails/pull/55382"><code>MakeActiveSupport::Gzip.compress</code>￼deterministic</a>.</p>

<blockquote>
  <p>I have some tests of code that uses <code>ActiveSupport::Gzip.compress</code> that have been flaky for a long time, and recently discovered this is because the output of that method includes the timestamp of when it was compressed. If two calls with the same input happen during different seconds, then you get different output (so, in my flaky tests, they fail to compare correctly).</p>
</blockquote>

<p>GZip takes a parameter called <code>mtime</code>, which is stored and changes the timestamp of the compressed file(s) <em>when they are uncompressed</em>. It changes the <em>content</em> of the gzipped file, because it stores the timestamp in the contents of the file, but doesn’t affect the mtime of the gzipped file <em>container</em>.</p>

<p>So in the case of Sprockets, if the modification date of the uncompressed asset changes, regardless of whether its contents have changed, a new and different (according to git or Docker) gzipped file will be generated. This was <em>really</em> bloating up my git repo.</p>

<p>Props to Rack maintainer Richard Schneeman who <a href="https://github.com/rails/sprockets/pull/197#issuecomment-162954641">dug further down this hole previously</a>, admirably asking the zlib group themselves for advice. The commentary made a mention of nginx docs, which I assume is for <a href="https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html"><code>ngx_http_gzip_static_module</code></a> which says:</p>

<blockquote>
  <p>The files can be compressed using the gzip command, or any other compatible one. It is recommended that the modification date and time of the original and compressed files be the same.</p>
</blockquote>

<p>But that’s not <code>GZip#mtime</code> value stored inside the contents of the gzip file, that’s the mtime of the <code>.gz</code> file container. Sprockets <em>also</em> sets that, with <a href="https://github.com/rails/sprockets/blob/4dff018b9271c37b09889e829f8926d1c5379731/lib/sprockets/utils/gzip.rb#L19C11-L19C22"><code>File.utime</code></a>.</p>

<p>It’s easy enough to patch the mtime to the “unknown” value of <code>0</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="k">module</span> <span class="nn">SprocketsGzipExt</span>
  <span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">_target</span><span class="p">)</span>
    <span class="n">archiver</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="kp">nil</span>
  <span class="k">end</span>

  <span class="no">Sprockets</span><span class="o">::</span><span class="no">Utils</span><span class="o">::</span><span class="no">Gzip</span><span class="p">.</span><span class="nf">prepend</span> <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>…though if you’re in my shoes, you might not even need these gzipped assets. afaict only Nginx makes use of them with the non-default <code>ngx_http_gzip_static_module</code> module; Apache requires some complicated RewriteRules; Puma doesn’t serve them, CDNs don’t request them. Maybe turn them off? 🤷</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/sprockets.rb</span>
<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">gzip</span> <span class="o">=</span> <span class="kp">false</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Fun fact: <a href="https://github.com/rails/sprockets-rails/pull/551">that configuration was undocumented</a></p>

<h3 id="maybe-please-dont-even-pass-mtime-to-gzip-for-web-assets">Maybe please don’t even pass <code>mtime</code> to gzip for web assets</h3>

<p>All of this stuff about file modification dates reminded me of <em>another</em> thing I had once previously rabbit-holed on, which was <a href="https://github.com/feedbin/feedbin/issues/726">poorly behaved conditional requests in RSS Readers</a>. The bad behavior involved inappropriately caching web requests whose Last-Modified HTTP header changed, but their contents didn’t. And how do webservers generate their Last-Modified header value? That’s right, file <code>mtime</code>, the one that can be set by <code>File.utime</code>!</p>

<p>…but not the one set by <code>GZip#mtime=</code>. I cannot find any evidence anywhere that value, <em>in the contents of the gzip file</em> matters. Nada. All it does is make the gzip file’s <em>contents</em> be different, because of that one tiny value being included. I can’t imagine anything cares about the original mtime when it’s unzipped, that wasn’t already transmitted via the Last-Modified HTTP header. What am I missing?</p>

<p>Of the evidence I have, it seems like developers set <code>GZip#mtime=</code>… because it’s an option? I couldn’t find a reason <a href="https://github.com/rack/rack/commit/d2d51ff05966b36c40dc9439437e82d0a23f2b88">in the Sprockets history</a>. I noticed that Rack::Deflater does the same for reasons I haven’t figured out <a href="https://github.com/rack/rack/commit/d2d51ff05966b36c40dc9439437e82d0a23f2b88">in their history</a> either.  This behavior probably is not busting <em>a lot</em> of content-based caches unnecessarily, but it probably does some. So maybe don’t do it unless you need to.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/08/building-deterministic-reproducible-assets-with-sprockets</link>
        <guid isPermaLink="true">https://island94.org/2025/08/building-deterministic-reproducible-assets-with-sprockets</guid>
        <pubDate>Tue, 26 Aug 2025 03:03:00 +0000</pubDate>
      </item>
      <item>
        <title>Everything I know about AI, I learned by reading the AWS Bedrock Client Ruby SDK code</title>
        <description>
          <![CDATA[
          <p><em>This essay is a little bit about me and how I solve problems, and a little bit about AI from the perspective of a software developer building AI-powered features into their product.</em></p>

<p>The past week at my startup has been a little different. I spent the week writing a grant application <a href="https://www.publicbenefitinnovationfund.org/summer-2025-open-call.html">for</a> “non-dilutive funding to accelerate AI-enabled solutions that help governments respond to recent federal policy changes and funding constraints in safety net programs.” It wasn’t particurly difficult, as we’re already deep into doing the work 💅 …but it was an interesting experience breaking that work down into discrete 250-word responses, all 17 (!) of them on the grant application.</p>

<p>One of my friends is a reviewer panelist (she’ll recuse herself from our proposal), and I was explaining my struggle to find an appropriate level of detail. Comparing an answer like:</p>

<blockquote>
  <p>…we use AWS Bedrock models which are SOC, HIPAA, and Fedramp compatible, and integrated via its SDK which has robust guardrail functions like contextual grounding and output filters that we’re using to ensure accuracy and safety when producing inferenced text output…</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>…we have robust controls for ensuring the safety and accuracy of AI-powered features…</p>
</blockquote>

<p>That all might sounds like word salad anyways, so I compared it analogously to saying, in the context of web design:</p>

<blockquote>
  <p>… we’re designing our application using contemporary HTML and CSS features like media queries, and minimal Javascript via progress enhancement, to be usable and accessible across web browsers on devices from mobile phones to desktop computers….</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>….mobile, responsive web design…</p>
</blockquote>

<p>Working and communicating at the correct level of complexity <em>is the work</em>. While I’m developing software, I tend to be reductive; as the meme goes: <em>I’m not here to talk. Just put my <a href="https://knowyourmeme.com/editorials/guides/whats-the-just-put-my-fries-in-the-bag-bro-meme-the-viral-catchphrase-and-its-memes-on-tiktok-explained"><del>fries</del></a> http in the bag, bro. My DOM goes in the bag. Just put my Browser Security Model</em> in the bag.</p>

<p>I guess I have the benefit of perspective, working in this field for 20+ years. While things have gotten to layer-upon-layer complexity, I can remember what simple looks and feels likes. It’s also <em>never</em> been simple.</p>

<p>For example, in the civic tech space, there’s been lots of times where on one side someone wants to talk about civic platforms and government vending machines and unleashing innovation, and on the other side is a small room with vendor representative that is existentially opposed to adding a reference field to a data specification without which the whole system is irreconcilably unusable. The expansive vision and the tangible work.</p>

<p>I believe, at the core of all of this IT (Information Technology (or ICT, Information and Communications Technology as it’s known globally), we’re doing <a href="https://knowyourmeme.com/memes/push-it-somewhere-else-patrick">pushing Patrick</a>: take information from one place, <em>and we push it somewhere else</em>.</p>

<p><img src="/uploads/2025/push-it-patrick.gif" alt="Push it Patrick GIF" /></p>

<p>Take that information from a person via a form, from a sensor, from a data feed, from a process, <em>and push it somewhere else</em>. Sure, we may enrich and transform it and present it differently, and obviously figuring out what is useful and valuable and useable is <em>the work</em>. From the backend to the frontend, and the frontend to the backend. From client to server, from server to server, protocol to protocol, over, under, you get the idea. The work is <em>pushing information somewhere else</em>.</p>

<p><strong>Anyways, about that AI…</strong></p>

<p>From Brian Merchant’s Blood in the Machine newsletter, describing going to an <a href="https://www.bloodinthemachine.com/p/ai-disagreements">AI retreat thing</a>:</p>

<blockquote>
  <p>I admittedly had a hard time with all this, and just a couple hours in, I began to feel pretty uncomfortable—not because I was concerned with what the rationalists were saying about AGI, but because my apparent inability to occupy the same plane of reality was so profound. In none of these talks did I hear any concrete mechanism described through which an AI might become capable of usurping power and enacting mass destruction, or a particularly plausible process through which a system might develop to “decide” to orchestrate mass destruction, or the ways it would navigate and/or commandeer the necessary physical hardware to wreak its carnage via a worldwide hodgepodge of different interfaces and coding languages of varying degrees of obsolescence and systems that already frequently break down while communicating with each other.</p>
</blockquote>

<p>I mean… exactly. Like what even.</p>

<p>From my own experience of writing that grant application I mentioned at the beginning of this post, and enumerating all of the AI-powered features that we’ve built already, are prototyping, or confidently believe we can deliver in the near-term future… it’s quite a lot. And it’s not that different from anything that’s come before: building concrete stuff that concretely works. I wrote <a href="https://island94.org/2025/01/how-im-thinking-about-ai-llms">something similar</a> back in January too, so maybe this feeling is here to stay.</p>

<p>The places where I struggled most to write about was in how many places, about trust and safety and risk and capacity… was explaining how we’re using functions that are quite simply exposed via the SDK. AWS Bedrock is how Amazon Web Services provides AI models as a billable resource developers can use. The SDK is how you invoke those AI models from your application.  <em>Just put the method signature in the bag.</em>  It’s all documented: the <code>#converse_stream</code> method, pretty much the only method to use: no joke, has <a href="https://github.com/aws/aws-sdk-ruby/blob/208a24482111145a209ff0a4a8fedf7a802b6993/gems/aws-sdk-bedrockruntime/lib/aws-sdk-bedrockruntime/client.rb#L1583-L2587">1003 lines of documentation above it describing all of the options to pass, and and all of the data that gets returned</a>:</p>

<ul>
  <li>Providing an inference prompt</li>
  <li>Attaching documents</li>
  <li>Tool usage, which is how models can coerced to produce structured output</li>
  <li>Contextual grounding, to coerce the model to use context from the input rather than its foundational training sources.</li>
  <li>Guardrails and safety filters, to do additional checks on the output, sometimes by other models.</li>
  <li>…and all of the limitations and constraints that are very <em>real</em> and <em>tangible</em>. By which I mean  the maximum number of items one can send in an array or the maximum number of bytes that can be sent as a base64-encoded string.</li>
</ul>

<p>Every option is very concretely about passing a simple hash of data in, and getting a hash of data out. <em>Just put the Ruby Hash in the bag.</em></p>

<p>To analogously compare this to one of the oldest and boringest AWS services, the Simple Storage Service, there is, with one hand, waving about how “the capability to store and retrieve an unlimited amount of data will change the world” and, and then with the other hand precisely “overriding the Content-Type of an S3 file upload”. Reading the method signature is the latter.</p>

<p>And I don’t mean to imply everything in that 1003 line docblock is all you need to know. But you might wonder, say “When might I want to get a <code>resp.output.message.content[0].citations_content.citations #=&gt; Array</code>?” and then you google it and go down a rabbit hole to learn that citations are just another form of tool usage and <em><a href="https://repost.aws/questions/QUKwoMWVdCRQ6Y_drrZNXZPg/how-to-have-a-bedrock-agent-reliably-include-knowledge-base-citations-in-the-final-response-of-invokeagent-for-agents-for-amazon-bedrock-runtime">sometimes the model won’t do it</a></em> which if you keep digging down that rabbit hole everything becomes evident that these are, at heart, still probabilistic text generators that are useful and interesting <em>in the same way S3 is useful and interesting, and also isn’t.</em>  It’s a totally different conversation.</p>

<p>So, if there’s any takeways to be had here:</p>

<ul>
  <li>This stuff is as boringly useful as any other AWS service is or isn’t, if you’re familiar with the vast number of AWS services.</li>
  <li>It’s maybe embarrassing to write about in tangible form because it’s already been boringly commodified as a service through AWS.</li>
  <li>…and also there are tangible, useful things to be built. And a lot of intellectual joy in breaking down how some high-level feature is built on top of these low-level services.</li>
</ul>

<p>My self-serving interest here is that I’d love to talk to other folks who are building stuff in Ruby on Rails using AI and LLMs and inference about the boring stuff involved in <em>taking information from one place, and pushing it somewhere else.</em></p>

<p>For example, yesterday I posted in the <a href="https://www.rubyonrails.link/">Ruby on Rails Link Slack</a> <code>#ai-lounge</code> channel:</p>

<blockquote>
  <p>Anyone building AI-powered features into their application? I’ve got an interface for translating a text field into another language, and I was curious if anyone has a pattern they like with Turbo/ActionCable/Stimulus for streaming responses to a particular form for a single client (e.g. there’s not yet a model record that can be broadcasted from). This is what I’m doing (hopefully it makes sense 😅) …</p>
</blockquote>

<p>…and I’m waiting for a response.</p>

          ]]>
        </description>
        <link>https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</link>
        <guid isPermaLink="true">https://island94.org/2025/08/everything-i-know-about-ai-learned-by-reading-the-aws-bedrock-client-ruby-sdk-code</guid>
        <pubDate>Sat, 09 Aug 2025 21:28:00 +0000</pubDate>
      </item>
      <item>
        <title>Consider Thruster with Puma on Heroku</title>
        <description>
          <![CDATA[
          <p>To briefly catch you up to speed if you haven’t been minutely tracking Ruby on Rails performance errata: the Puma webserver has some mildly surprising behavior with the order in which it processes and prioritizes requests that are pipelined through keepalive connections; under load, it can lead to unexpected latency.</p>

<p>Heroku wrote <a href="https://www.heroku.com/blog/pumas-routers-keepalives-ohmy/">~3,000 words about this Puma thing</a>, and <a href="https://github.com/puma/puma/issues/3487">very smart people</a> are <a href="https://github.com/puma/puma/pull/3506">working on it</a>. All of this became mildly important because: Heroku upgraded their network router (“Router 2.0”), which <em>does</em> support connection keepalive, which has the potential to reduce a little bit of latency by reducing the number of TCP handshakes going over Heroku’s internal network between their router and your application dyno. People want it.</p>

<p>When you read the Heroku blog post (all several thousand words of it), it will suggest working around this with Puma configuration like (1) disabling connection keepalive in Puma or (2) disabling a Puma setting called <code>max_fast_inline</code>, though I’m pretty sure this has the same effect in Puma as disabling connection keepalives too (last I checked there wasn’t consensus in Puma as to what parts of the related behavior were intended but surprising, and what was unintended bugs in the logic).</p>

<p>Anyways, there’s a 3rd option: <strong>use Thruster</strong>.</p>

<ul>
  <li>Requests on the Heroku network between the Heroku router and Thruster running in your application dyno can use connection keepalives (sidenote: I’m 98% confident Thruster supports keepalives because <a href="https://github.com/basecamp/thruster/blob/10e33f6f5a2476231c00a59be209f7a58e98dc1a/internal/server.go#L9">Go <code>net/http</code></a> enables keepalives by default and Thruster doesn’t appear to explicitly disable them)</li>
  <li>Requests <em>locally</em> within your application dyno between Thruster and Puma can disable connection keepalive and there shouldn’t be any network latency for the TCP handshake because it’s all happening locally in the dyno.</li>
</ul>

<p>No one else seems to be blogging about this—a fact pointed out when I suggested this in the Rails Performance Slack. So here ya go.</p>

<ol>
  <li>Add the <code>thruster</code> <a href="https://github.com/basecamp/thruster">gem</a></li>
  <li>Update your Procfile: <code>web: HTTP_PORT=$PORT TARGET_PORT=3001 bundle exec thrust bin/rails server</code></li>
  <li>Disable Puma’s keepalives: <code>enable_keep_alives false</code></li>
</ol>

<p>I was already using Thruster with Puma on Heroku because of the benefits of x-sendfile support. If you’re worried about resource usage (because Thruster is yet another process) it’s been pretty minimal. I looked just now on one app and 13MB for Thruster next to 200MB for the Rails app running in Puma; seems tiny to me.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>heroku ps:exec <span class="nt">-a</span> APPNAME
<span class="c"># ....</span>
<span class="nv">$ </span>ps <span class="nt">-eo</span> rss,pss,cmd
  RSS   PSS CMD
    4     0 ps-run
11324 12792 /app/vendor/bundle/ruby/3.4.0/gems/thruster-0.1.14-x86_64-linux/exe/
 2960  1095 sshd: /usr/sbin/sshd <span class="nt">-f</span> /app/.ssh/sshd_config <span class="nt">-o</span> Port 1092 <span class="o">[</span>listener
 2220   407 /bin/bash <span class="nt">-l</span> <span class="nt">-c</span> <span class="nv">HTTP_PORT</span><span class="o">=</span><span class="nv">$PORT</span> <span class="nv">TARGET_PORT</span><span class="o">=</span>3001 bundle <span class="nb">exec </span>thrust
199336 187215 puma 6.6.0 <span class="o">(</span>tcp://0.0.0.0:3001<span class="o">)</span> <span class="o">[</span>app]
 8316  1821 ssh <span class="nt">-o</span> <span class="nv">ServerAliveInterval</span><span class="o">=</span>30 <span class="nt">-o</span> <span class="nv">ServerAliveCountMax</span><span class="o">=</span>3 <span class="nt">-o</span> HostKeyAlg
 9172  6346 skylightd
 8244  1367 sshd: u16321 <span class="o">[</span>priv]
 5548  1296 sshd: u16321@pts/0
 4444  1178 <span class="nt">-bash</span>
 4036  1964 ps <span class="nt">-eo</span> rss,pss,cmd
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</link>
        <guid isPermaLink="true">https://island94.org/2025/07/consider-thruster-with-puma-on-heroku</guid>
        <pubDate>Fri, 25 Jul 2025 18:18:00 +0000</pubDate>
      </item>
      <item>
        <title>How to customize Rails I18n key suffixes like `_md` for Markdown</title>
        <description>
          <![CDATA[
          <p>If you’ve had reason to use internationalization in Rails on Rails, you’ve probably used a <a href="https://guides.rubyonrails.org/i18n.html#using-safe-html-translations">nifty feature</a> of it:</p>

<blockquote>
  <p>Keys with a <code>_html</code> suffix… are marked as HTML safe. When you use them in views the HTML will not be escaped.</p>
</blockquote>

<p>Authoring HTML within translations can be a pain because HTML is quite verbose and easy to mess up when maintaining multiple versions of the same phrase, or paragraph, or page across multiple languages.</p>

<p>It would be nice 💅 to have something like this:</p>

<blockquote>
  <p>Keys with a <code>_md</code> suffix can be authored in Markdown and will be automatically converted to HTML and marked as HTML safe.</p>
</blockquote>

<p>Markdown is a lot less verbose than HTML and easier to write and eyeball. Let’s do it!</p>

<p>First, we have to patch into the I18n <code>translate</code> method. It looks something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; -(2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>Fun Fact:</strong> Rails does a clever thing to detect missing translations. I18n accepts a stack of fallback defaults, and Rails <a href="https://github.com/rails/rails/pull/45572">appends a magic number</a> to the back of that stack: <code>-(2**60) =&gt; -1152921504606846976</code>. If a translation ever returns that value, Rails assumes that the translation fell through the entire fallback stack and is therefore missing. (It took me a bit of sleuthing to figure out what the heck this weird number meant while poking around.)</p>

<p>Second, we patch the Rails HTML Safe behavior to <em>also</em> make these strings HTML safe too:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
</code></pre></div></div>

<p>That’s pretty much it!</p>

<p>If you’re uncomfortable patching things, Tim Masliuchenko has a gem called  <a href="https://github.com/timfjord/i18n-transformers"><code>I18n::Transformers</code></a> that makes it easy create custom key-based transformations. I believe you’ll still need to patch into the HTML safety behavior of Rails though—and anything involving marking things as HTML-safe should be always be scrutinized for <a href="https://guides.rubyonrails.org/security.html#cross-site-scripting-xss">XSS</a> potential.</p>

<p>Here’s the full initializer I have, including how I get Kramdown to create “inline” markdown:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/initializers/markdown.rb</span>

<span class="k">module</span> <span class="nn">Markdown</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"Can't provide both text and block"</span> <span class="k">if</span> <span class="n">text</span> <span class="o">&amp;&amp;</span> <span class="nb">block_given?</span>

    <span class="n">text</span> <span class="o">=</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="k">return</span> <span class="s2">""</span> <span class="k">unless</span> <span class="n">text</span>

    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">strip_heredoc</span>
    <span class="n">options</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">reverse_merge</span><span class="p">(</span>
      <span class="ss">auto_ids: </span><span class="kp">false</span><span class="p">,</span>
      <span class="ss">smart_quotes: </span><span class="p">[</span><span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"apos"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">,</span> <span class="s2">"quot"</span><span class="p">]</span> <span class="c1"># disable smart quotes</span>
    <span class="p">)</span>
    <span class="no">Kramdown</span><span class="o">::</span><span class="no">Document</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">options</span><span class="p">).</span><span class="nf">to_html</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="p">)</span>
    <span class="c1"># Custom input parser defined in Kramdown::Parser::Inline</span>
    <span class="n">convert</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="ss">input: </span><span class="s2">"Inline"</span><span class="p">,</span> <span class="o">**</span><span class="p">).</span><span class="nf">strip</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">HtmlSafeTranslationExt</span>
    <span class="k">def</span> <span class="nf">html_safe_translation_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">I18nBackendExt</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="k">super</span>
      <span class="c1"># Rails missing key returns as MISSING_TRANSLATION =&gt; (2**60) =&gt; -1152921504606846976</span>
      <span class="k">if</span> <span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">end_with?</span><span class="p">(</span><span class="s2">"_md"</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="no">Markdown</span><span class="p">.</span><span class="nf">inline</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HtmlSafeTranslation</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">HtmlSafeTranslationExt</span>
<span class="no">ActiveSupport</span><span class="p">.</span><span class="nf">on_load</span><span class="p">(</span><span class="ss">:i18n</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">I18n</span><span class="p">.</span><span class="nf">backend</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">prepend</span> <span class="no">Markdown</span><span class="o">::</span><span class="no">I18nBackendExt</span>
<span class="k">end</span>

<span class="c1"># Generate HTML from Markdown without any block-level elements (p, etc.)</span>
<span class="c1"># http://stackoverflow.com/a/30468100/241735</span>
<span class="k">module</span> <span class="nn">Kramdown</span>
  <span class="k">module</span> <span class="nn">Parser</span>
    <span class="k">class</span> <span class="nc">Inline</span> <span class="o">&lt;</span> <span class="no">Kramdown</span><span class="o">::</span><span class="no">Parser</span><span class="o">::</span><span class="no">Kramdown</span>
      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
        <span class="k">super</span>
        <span class="vi">@block_parsers</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

          ]]>
        </description>
        <link>https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</link>
        <guid isPermaLink="true">https://island94.org/2025/07/customize-rails-i18n-key-suffixes-like-md-for-markdown</guid>
        <pubDate>Wed, 16 Jul 2025 10:00:00 +0000</pubDate>
      </item>
  </channel>
</rss>
